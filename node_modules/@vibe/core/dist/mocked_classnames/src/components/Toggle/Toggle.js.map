{"version":3,"file":"Toggle.js","sources":["../../../../../src/components/Toggle/Toggle.tsx"],"sourcesContent":["import React, { type ChangeEvent, forwardRef } from \"react\";\nimport cx from \"classnames\";\nimport { noop as NOOP } from \"es-toolkit\";\nimport Switch from \"../Switch/Switch\";\nimport { MockToggle } from \"./MockToggle\";\nimport { type VibeComponentProps } from \"../../types\";\nimport styles from \"./Toggle.module.scss\";\nimport { ComponentDefaultTestId, getTestId } from \"../../tests/test-ids-utils\";\nimport { type ToggleSize } from \"./Toggle.types\";\nimport { ComponentVibeId } from \"../../tests/constants\";\n\nexport interface ToggleProps extends VibeComponentProps {\n  /**\n   * Class name applied when the toggle is selected.\n   */\n  toggleSelectedClassName?: string;\n  /**\n   * If true, the toggle is selected by default.\n   */\n  isDefaultSelected?: boolean;\n  /**\n   * Controls the selected state of the toggle.\n   */\n  isSelected?: boolean;\n  /**\n   * Callback fired when the toggle state changes.\n   */\n  onChange?: (value: boolean, event: ChangeEvent<HTMLInputElement>) => void;\n  /**\n   * The value associated with the toggle.\n   */\n  value?: string;\n  /**\n   * The name attribute of the toggle input.\n   */\n  name?: string;\n  /**\n   * If true, disables the toggle.\n   */\n  disabled?: boolean;\n  /**\n   * If true, hides the on/off labels.\n   */\n  areLabelsHidden?: boolean;\n  /**\n   * If true, removes the horizontal spacing around the toggle.\n   */\n  noSpacing?: boolean;\n  /**\n   * The text displayed when the toggle is in the \"on\" position.\n   */\n  onOverrideText?: string;\n  /**\n   * The text displayed when the toggle is in the \"off\" position.\n   */\n  offOverrideText?: string;\n  /**\n   * The ARIA label for accessibility.\n   */\n  ariaLabel?: string;\n  /**\n   * The ID of the element controlled by the toggle.\n   */\n  ariaControls?: string;\n  /**\n   * The size of the toggle.\n   */\n  size?: ToggleSize;\n}\n\nconst Toggle = forwardRef(\n  (\n    {\n      id,\n      className,\n      toggleSelectedClassName,\n      isDefaultSelected = true,\n      isSelected,\n      onChange = NOOP,\n      value,\n      name,\n      disabled,\n      ariaLabel,\n      ariaControls,\n      areLabelsHidden = false,\n      noSpacing,\n      onOverrideText = \"On\",\n      offOverrideText = \"Off\",\n      size = \"medium\",\n      \"data-testid\": dataTestId\n    }: ToggleProps,\n    ref: React.ForwardedRef<HTMLInputElement>\n  ) => {\n    const wrapperClassName = cx(styles.wrapper);\n    const inputClassName = cx(styles.toggleInput);\n\n    return (\n      <Switch\n        defaultChecked={isDefaultSelected}\n        checked={isSelected}\n        id={id}\n        wrapperClassName={wrapperClassName}\n        onChange={onChange}\n        value={value}\n        name={name}\n        disabled={disabled}\n        ariaLabel={ariaLabel}\n        ariaControls={ariaControls}\n        inputClassName={inputClassName}\n        ref={ref}\n        data-testid={dataTestId || getTestId(ComponentDefaultTestId.TOGGLE)}\n        data-vibe={ComponentVibeId.TOGGLE}\n      >\n        <MockToggle\n          areLabelsHidden={areLabelsHidden}\n          noSpacing={noSpacing}\n          offOverrideText={offOverrideText}\n          onOverrideText={onOverrideText}\n          disabled={disabled}\n          className={className}\n          selectedClassName={toggleSelectedClassName}\n          size={size}\n        />\n      </Switch>\n    );\n  }\n);\n\nexport default Toggle;\n"],"names":["Toggle","forwardRef","_ref","ref","id","className","toggleSelectedClassName","_ref$isDefaultSelecte","isDefaultSelected","isSelected","_ref$onChange","onChange","NOOP","value","name","disabled","ariaLabel","ariaControls","_ref$areLabelsHidden","areLabelsHidden","noSpacing","_ref$onOverrideText","onOverrideText","_ref$offOverrideText","offOverrideText","_ref$size","size","dataTestId","wrapperClassName","cx","styles","wrapper","inputClassName","toggleInput","React","createElement","Switch","defaultChecked","checked","getTestId","ComponentDefaultTestId","TOGGLE","ComponentVibeId","MockToggle","selectedClassName"],"mappings":"mWAsEMA,IAAAA,EAASC,GACb,SAAAC,EAoBEC,GACE,IAnBAC,EAAEF,EAAFE,GACAC,EAASH,EAATG,UACAC,EAAuBJ,EAAvBI,wBAAuBC,EAAAL,EACvBM,kBAAAA,OAAoB,IAAHD,GAAOA,EACxBE,EAAUP,EAAVO,WAAUC,EAAAR,EACVS,SAAAA,OAAWC,IAAHF,EAAGE,EAAIF,EACfG,EAAKX,EAALW,MACAC,EAAIZ,EAAJY,KACAC,EAAQb,EAARa,SACAC,EAASd,EAATc,UACAC,EAAYf,EAAZe,aAAYC,EAAAhB,EACZiB,gBAAAA,OAAkB,IAAHD,GAAQA,EACvBE,EAASlB,EAATkB,UAASC,EAAAnB,EACToB,eAAAA,OAAiB,IAAHD,EAAG,KAAIA,EAAAE,EAAArB,EACrBsB,gBAAAA,OAAkB,IAAHD,EAAG,MAAKA,EAAAE,EAAAvB,EACvBwB,KAAAA,OAAO,IAAHD,EAAG,SAAQA,EACAE,EAAUzB,EAAzB,eAII0B,EAAmBC,EAAGC,EAAOC,SAC7BC,EAAiBH,EAAGC,EAAOG,aAEjC,OACEC,EAAAC,cAACC,EAAM,CACLC,eAAgB7B,EAChB8B,QAAS7B,EACTL,GAAIA,EACJwB,iBAAkBA,EAClBjB,SAAUA,EACVE,MAAOA,EACPC,KAAMA,EACNC,SAAUA,EACVC,UAAWA,EACXC,aAAcA,EACde,eAAgBA,EAChB7B,IAAKA,EAAG,cACKwB,GAAcY,EAAUC,EAAuBC,QACjD,YAAAC,EAAgBD,QAE3BP,EAAAC,cAACQ,EACC,CAAAxB,gBAAiBA,EACjBC,UAAWA,EACXI,gBAAiBA,EACjBF,eAAgBA,EAChBP,SAAUA,EACVV,UAAWA,EACXuC,kBAAmBtC,EACnBoB,KAAMA,IAId"}