{"version":3,"file":"DatePicker.js","sources":["../../../../../src/components/DatePicker/DatePicker.tsx"],"sourcesContent":["import React, { forwardRef, useCallback, useState } from \"react\";\nimport cx from \"classnames\";\nimport moment from \"moment\";\nimport \"react-dates/initialize.js\";\nimport {\n  type DayOfWeekShape,\n  DayPickerRangeController,\n  DayPickerSingleDateController,\n  type DayPickerPhrases\n} from \"react-dates\";\n/** @ts-expect-error this is exported, but not typed */\nimport { DayPickerPhrases as defaultPhrases } from \"react-dates/lib/defaultPhrases.js\";\nimport DatePickerHeaderComponent from \"./DatePickerHeader/DatePickerHeader\";\nimport DateNavigationItem from \"./DateNavigationItem/DateNavigationItem\";\nimport YearPicker from \"./YearPicker/YearPicker\";\nimport { DAY_SIZE, WEEK_FIRST_DAY } from \"./constants\";\nimport { Direction, FocusInput, type Moment, type RangeDate } from \"./types\";\nimport { type VibeComponentProps } from \"../../types\";\nimport { getTestId } from \"../../tests/test-ids-utils\";\nimport { ComponentDefaultTestId, ComponentVibeId } from \"../../tests/constants\";\nimport { NOOP } from \"../../utils/function-utils\";\nimport styles from \"./DatePicker.module.scss\";\n// Make sure to update when upgrading react-dates\nimport \"./external_datepicker.scss\";\n\nexport interface DatePickerProps extends VibeComponentProps {\n  /**\n   * The first day of the week to display.\n   */\n  firstDayOfWeek?: DayOfWeekShape;\n  /**\n   * The currently selected date.\n   */\n  date?: Moment;\n  /**\n   * The end date for range selection mode.\n   */\n  endDate?: Moment;\n  /**\n   * Callback fired when a date is selected.\n   */\n  onPickDate?: (date: Moment | RangeDate) => void;\n  /**\n   * If true, hides the navigation buttons.\n   */\n  hideNavigationKeys?: boolean;\n  /**\n   * If true, allows selecting days outside the current month.\n   */\n  enableOutsideDays?: boolean;\n  /**\n   * If true, displays a column with week numbers.\n   */\n  showWeekNumber?: boolean;\n  /**\n   * The size of a single day cell.\n   */\n  daySize?: number;\n  /**\n   * Function to determine if a specific day should be disabled.\n   */\n  shouldBlockDay?: (date: Moment) => boolean;\n  /**\n   * If true, enables date range selection mode.\n   */\n  range?: boolean;\n  /**\n   * Custom phrases for accessibility and aria-labels.\n   */\n  phrases?: DayPickerPhrases;\n  /**\n   * The number of months displayed in the calendar.\n   */\n  numberOfMonths?: number;\n  /**\n   * Function to determine if a specific year should be disabled.\n   */\n  shouldBlockYear?: (year: number) => boolean;\n  /**\n   * Function to determine if a specific date range should be disabled.\n   */\n  shouldBlockRange?: (date: Moment) => boolean;\n}\n\nconst DatePicker = forwardRef(\n  (\n    {\n      id,\n      className,\n      firstDayOfWeek = WEEK_FIRST_DAY,\n      daySize = DAY_SIZE,\n      range = false,\n      shouldBlockDay,\n      shouldBlockYear,\n      numberOfMonths = 1,\n      hideNavigationKeys = false,\n      date,\n      endDate,\n      onPickDate = NOOP,\n      enableOutsideDays = false,\n      showWeekNumber = false,\n      shouldBlockRange,\n      \"data-testid\": dataTestId,\n      phrases\n    }: DatePickerProps,\n    ref: React.ForwardedRef<HTMLDivElement>\n  ) => {\n    const [focusedInput, setFocusedInput] = useState(FocusInput.startDate);\n    const [isMonthYearSelection, setIsMonthYearSelection] = useState(false); //show Month/Year selection dropdown\n    const [overrideDateForView, setOverrideDateForView] = useState<Moment | null>(null);\n    const [yearFunc, setYearFunc] = useState(null);\n\n    const renderMonth = useCallback(\n      ({\n        month,\n        onYearSelect\n      }: {\n        month: moment.Moment;\n        onYearSelect: (currentMonth: moment.Moment, newMonthVal: string) => void;\n      }) => {\n        if (!yearFunc && onYearSelect) {\n          setYearFunc(() => onYearSelect);\n        }\n        return (\n          <DatePickerHeaderComponent\n            data-testid={dataTestId || getTestId(ComponentDefaultTestId.DATEPICKER_HEADER, id)}\n            currentDate={month || moment()}\n            isMonthYearSelection={isMonthYearSelection}\n            onToggleMonthYearPicker={() => setIsMonthYearSelection(val => !val)}\n            hideNavigationKeys={hideNavigationKeys}\n          />\n        );\n      },\n      [isMonthYearSelection, dataTestId, id, hideNavigationKeys, yearFunc]\n    );\n\n    const renderDay = useCallback(\n      (day: Moment) => {\n        const weekNumber = firstDayOfWeek === 0 ? day.clone().add(1, \"d\").isoWeek() : day.isoWeek();\n        return (\n          <>\n            <span className={styles.calendarDayWeekNumber}>{weekNumber}</span> {day.format(\"D\")}\n          </>\n        );\n      },\n      [firstDayOfWeek]\n    );\n\n    const changeCurrentDateFromMonthYearView = useCallback(\n      (newDate: Moment | null) => {\n        const oldDate = overrideDateForView || date;\n        setOverrideDateForView(newDate);\n        setIsMonthYearSelection(false);\n        yearFunc(oldDate, moment(newDate).year());\n      },\n      [overrideDateForView, date, yearFunc]\n    );\n\n    const renderMonthYearSelection = useCallback(() => {\n      return (\n        <YearPicker\n          data-testid={dataTestId || getTestId(ComponentDefaultTestId.DATEPICKER_YEAR_SELECTION, id)}\n          selectedDate={date}\n          isYearBlocked={shouldBlockYear}\n          changeCurrentDate={changeCurrentDateFromMonthYearView}\n        />\n      );\n    }, [dataTestId, id, overrideDateForView, date, shouldBlockYear, changeCurrentDateFromMonthYearView]);\n\n    const onDateRangeChange = useCallback(\n      (date: RangeDate) => {\n        if (!onPickDate) return;\n        if (focusedInput === FocusInput.startDate) {\n          onPickDate({ ...date, endDate: null });\n        } else {\n          onPickDate(date);\n        }\n      },\n      [focusedInput, onPickDate]\n    );\n\n    const onFocusChange = useCallback((focusedInput: FocusInput) => {\n      setFocusedInput(focusedInput || FocusInput.startDate);\n    }, []);\n\n    const mergedPhrases = { ...defaultPhrases, ...phrases };\n\n    const shouldShowNav = !hideNavigationKeys && !isMonthYearSelection;\n    return (\n      <div\n        data-testid={dataTestId || getTestId(ComponentDefaultTestId.DATEPICKER, id)}\n        ref={ref}\n        id={id}\n        className={cx(styles.datepickerContainer, className, {\n          [styles.withWeekNumber]: showWeekNumber,\n          [styles.rangePickerMode]: range,\n          [styles.monthYearSelection]: isMonthYearSelection\n        })}\n        data-vibe={ComponentVibeId.DATE_PICKER}\n      >\n        {range ? (\n          <DayPickerRangeController\n            phrases={mergedPhrases}\n            renderDayContents={showWeekNumber ? renderDay : undefined}\n            firstDayOfWeek={firstDayOfWeek}\n            hideKeyboardShortcutsPanel\n            startDate={date}\n            endDate={endDate}\n            onDatesChange={onDateRangeChange}\n            focusedInput={focusedInput}\n            minimumNights={0}\n            onFocusChange={onFocusChange}\n            navPrev={shouldShowNav ? <DateNavigationItem kind={Direction.prev} /> : <div />}\n            navNext={shouldShowNav ? <DateNavigationItem kind={Direction.next} /> : <div />}\n            daySize={daySize}\n            isOutsideRange={shouldBlockRange}\n            isDayBlocked={shouldBlockDay}\n            renderMonthElement={renderMonth}\n            enableOutsideDays={enableOutsideDays || showWeekNumber}\n            numberOfMonths={numberOfMonths}\n            initialVisibleMonth={() => overrideDateForView || date || moment()}\n          />\n        ) : (\n          <DayPickerSingleDateController\n            phrases={mergedPhrases}\n            renderDayContents={showWeekNumber ? renderDay : undefined}\n            firstDayOfWeek={firstDayOfWeek}\n            hideKeyboardShortcutsPanel\n            onFocusChange={NOOP}\n            numberOfMonths={numberOfMonths}\n            date={date}\n            onDateChange={(date: Moment) => onPickDate(date)}\n            navPrev={shouldShowNav ? <DateNavigationItem kind={Direction.prev} /> : <div />}\n            navNext={shouldShowNav ? <DateNavigationItem kind={Direction.next} /> : <div />}\n            focused={true}\n            renderMonthElement={renderMonth}\n            enableOutsideDays={enableOutsideDays || showWeekNumber}\n            daySize={daySize}\n            isDayBlocked={shouldBlockDay}\n            initialVisibleMonth={() => overrideDateForView || date || moment()}\n          />\n        )}\n        {isMonthYearSelection && renderMonthYearSelection()}\n      </div>\n    );\n  }\n);\n\nexport default DatePicker;\n"],"names":["DatePicker","forwardRef","_ref","ref","id","className","_ref$firstDayOfWeek","firstDayOfWeek","WEEK_FIRST_DAY","_ref$daySize","daySize","DAY_SIZE","_ref$range","range","shouldBlockDay","shouldBlockYear","_ref$numberOfMonths","numberOfMonths","_ref$hideNavigationKe","hideNavigationKeys","date","endDate","_ref$onPickDate","onPickDate","NOOP","_ref$enableOutsideDay","enableOutsideDays","_ref$showWeekNumber","showWeekNumber","shouldBlockRange","dataTestId","phrases","_useState","useState","FocusInput","startDate","_useState2","_slicedToArray","focusedInput","setFocusedInput","_useState3","_useState4","isMonthYearSelection","setIsMonthYearSelection","_useState5","_useState6","overrideDateForView","setOverrideDateForView","_useState7","_useState8","yearFunc","setYearFunc","renderMonth","useCallback","_ref2","month","onYearSelect","React","DatePickerHeaderComponent","getTestId","ComponentDefaultTestId","DATEPICKER_HEADER","currentDate","moment","onToggleMonthYearPicker","val","renderDay","day","weekNumber","clone","add","isoWeek","createElement","Fragment","styles","calendarDayWeekNumber","format","changeCurrentDateFromMonthYearView","newDate","oldDate","year","renderMonthYearSelection","YearPicker","DATEPICKER_YEAR_SELECTION","selectedDate","isYearBlocked","changeCurrentDate","onDateRangeChange","onFocusChange","mergedPhrases","Object","assign","defaultPhrases","shouldShowNav","DATEPICKER","cx","datepickerContainer","_defineProperty","withWeekNumber","rangePickerMode","monthYearSelection","ComponentVibeId","DATE_PICKER","DayPickerRangeController","renderDayContents","undefined","hideKeyboardShortcutsPanel","onDatesChange","minimumNights","navPrev","DateNavigationItem","kind","Direction","prev","navNext","next","isOutsideRange","isDayBlocked","renderMonthElement","initialVisibleMonth","DayPickerSingleDateController","onDateChange","focused"],"mappings":"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"}