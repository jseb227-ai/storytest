{"version":3,"file":"DropdownChip.js","sources":["../../../../../../../src/components/DropdownNew/components/Trigger/DropdownChip.tsx"],"sourcesContent":["import React from \"react\";\nimport { Chips, type ChipsProps } from \"../../../Chips\";\nimport { type BaseListItemData } from \"../../../BaseListItem\";\n\nconst getChipPropsFromItemElements = (item: BaseListItemData<Record<string, unknown>>): Partial<ChipsProps> => {\n  const chipProps: Partial<ChipsProps> = {};\n  if (item?.startElement) {\n    switch (item?.startElement?.type) {\n      case \"icon\":\n        chipProps.leftIcon = item?.startElement?.value;\n        break;\n      case \"avatar\":\n        chipProps.leftAvatar = item?.startElement?.value;\n        break;\n      case \"custom\":\n        chipProps.leftRenderer = item?.startElement?.render() as React.ReactNode;\n        break;\n      default:\n        break;\n    }\n  }\n\n  if (item?.endElement) {\n    switch (item?.endElement?.type) {\n      case \"icon\":\n        chipProps.rightIcon = item?.endElement?.value;\n        break;\n      case \"custom\":\n        chipProps.rightRenderer = item?.endElement?.render() as React.ReactNode;\n        break;\n      default:\n        break;\n    }\n  }\n  return chipProps;\n};\n\ninterface DropdownChipProps<Item extends BaseListItemData<Record<string, unknown>>> {\n  item: Item;\n  onDelete: () => void;\n  disabled?: boolean;\n  readOnly?: boolean;\n  className?: string;\n}\n\nconst DropdownChip = <Item extends BaseListItemData<Record<string, unknown>>>({\n  item,\n  onDelete,\n  disabled,\n  readOnly,\n  className\n}: DropdownChipProps<Item>) => {\n  const chipSpecificProps = getChipPropsFromItemElements(item);\n\n  return (\n    <Chips\n      label={item.label}\n      closeButtonAriaLabel={`Remove ${item.label}`}\n      onDelete={onDelete}\n      disabled={disabled}\n      readOnly={readOnly}\n      noMargin\n      className={className}\n      color={item.chipColor || \"primary\"}\n      {...chipSpecificProps}\n    />\n  );\n};\n\nexport default DropdownChip;\n"],"names":["DropdownChip","_ref","item","onDelete","disabled","readOnly","className","chipSpecificProps","chipProps","startElement","_a","type","leftIcon","_b","value","leftAvatar","_c","leftRenderer","_d","render","endElement","_e","rightIcon","_f","rightRenderer","_g","getChipPropsFromItemElements","React","Chips","Object","assign","label","closeButtonAriaLabel","concat","noMargin","color","chipColor"],"mappings":"4DAIA,IAyCMA,EAAe,SAAHC,GAMY,IAL5BC,EAAID,EAAJC,KACAC,EAAQF,EAARE,SACAC,EAAQH,EAARG,SACAC,EAAQJ,EAARI,SACAC,EAASL,EAATK,UAEMC,EAhD6B,SAACL,qBAC9BM,EAAiC,CAAA,EACvC,GAAIN,eAAAA,EAAMO,aACR,OAA4B,QAApBC,EAAAR,aAAI,EAAJA,EAAMO,oBAAc,IAAAC,OAAA,EAAAA,EAAAC,MAC1B,IAAK,OACHH,EAAUI,SAA6B,QAAlBC,EAAAX,aAAI,EAAJA,EAAMO,oBAAY,IAAAI,OAAA,EAAAA,EAAEC,MACzC,MACF,IAAK,SACHN,EAAUO,WAA+B,QAAlBC,EAAAd,aAAI,EAAJA,EAAMO,oBAAY,IAAAO,OAAA,EAAAA,EAAEF,MAC3C,MACF,IAAK,SACHN,EAAUS,aAAmC,QAApBC,EAAAhB,aAAA,EAAAA,EAAMO,oBAAc,IAAAS,OAAA,EAAAA,EAAAC,SAOnD,GAAIjB,eAAAA,EAAMkB,WACR,OAA0B,QAAlBC,EAAAnB,aAAI,EAAJA,EAAMkB,kBAAY,IAAAC,OAAA,EAAAA,EAAAV,MACxB,IAAK,OACHH,EAAUc,UAA4B,QAAhBC,EAAArB,aAAI,EAAJA,EAAMkB,kBAAU,IAAAG,OAAA,EAAAA,EAAET,MACxC,MACF,IAAK,SACHN,EAAUgB,cAAkC,QAAlBC,EAAAvB,aAAA,EAAAA,EAAMkB,kBAAY,IAAAK,OAAA,EAAAA,EAAAN,SAMlD,OAAOX,CACT,CAiB4BkB,CAA6BxB,GAEvD,OACEyB,gBAACC,EAAKC,OAAAC,OAAA,CACJC,MAAO7B,EAAK6B,MACZC,+BAAoBC,OAAY/B,EAAK6B,OACrC5B,SAAUA,EACVC,SAAUA,EACVC,SAAUA,EACV6B,UAAQ,EACR5B,UAAWA,EACX6B,MAAOjC,EAAKkC,WAAa,WACrB7B,GAGV"}