{"version":3,"file":"Menu.js","sources":["../../../../../../../src/components/DropdownNew/components/Menu/Menu.tsx"],"sourcesContent":["import React from \"react\";\nimport cx from \"classnames\";\nimport { DialogContentContainer } from \"../../../DialogContentContainer\";\nimport { BaseList } from \"../../../BaseList\";\nimport { useDropdownContext } from \"../../context/DropdownContext\";\nimport { type BaseListItemData } from \"../../../BaseListItem\";\nimport styles from \"./Menu.module.scss\";\n\nconst Menu = <Item extends BaseListItemData<Record<string, unknown>>>() => {\n  const {\n    isOpen,\n    filteredOptions,\n    highlightedIndex,\n    getMenuProps,\n    getItemProps,\n    optionRenderer,\n    menuRenderer,\n    size,\n    withGroupDivider,\n    stickyGroupTitle,\n    dir,\n    noOptionsMessage,\n    maxMenuHeight,\n    onScroll,\n    menuAriaLabel,\n    selectedItem,\n    selectedItems,\n    menuWrapperClassName\n  } = useDropdownContext<Item>();\n\n  const currentSelection = selectedItems?.length > 0 ? selectedItems : selectedItem ? [selectedItem] : [];\n\n  return (\n    <DialogContentContainer\n      className={cx({ [styles.menuVisible]: isOpen, [styles.menuHidden]: !isOpen }, menuWrapperClassName)}\n      style={!isOpen ? { padding: 0 } : undefined}\n    >\n      <BaseList<Item>\n        size={size}\n        options={filteredOptions}\n        selectedItems={currentSelection}\n        highlightedIndex={highlightedIndex}\n        menuAriaLabel={menuAriaLabel}\n        getMenuProps={getMenuProps}\n        getItemProps={getItemProps}\n        withGroupDivider={withGroupDivider}\n        stickyGroupTitle={stickyGroupTitle}\n        dir={dir}\n        itemRenderer={optionRenderer}\n        noOptionsMessage={noOptionsMessage}\n        renderOptions={isOpen}\n        onScroll={onScroll}\n        maxMenuHeight={maxMenuHeight}\n        menuRenderer={menuRenderer}\n      />\n    </DialogContentContainer>\n  );\n};\n\nexport default Menu;\n"],"names":["Menu","_useDropdownContext","useDropdownContext","isOpen","filteredOptions","highlightedIndex","getMenuProps","getItemProps","optionRenderer","menuRenderer","size","withGroupDivider","stickyGroupTitle","dir","noOptionsMessage","maxMenuHeight","onScroll","menuAriaLabel","selectedItem","selectedItems","menuWrapperClassName","currentSelection","length","React","DialogContentContainer","className","cx","_defineProperty","styles","menuVisible","menuHidden","style","undefined","padding","createElement","BaseList","options","itemRenderer","renderOptions"],"mappings":"sWAQA,IAAMA,EAAO,WACX,IAAAC,EAmBIC,IAlBFC,EAAMF,EAANE,OACAC,EAAeH,EAAfG,gBACAC,EAAgBJ,EAAhBI,iBACAC,EAAYL,EAAZK,aACAC,EAAYN,EAAZM,aACAC,EAAcP,EAAdO,eACAC,EAAYR,EAAZQ,aACAC,EAAIT,EAAJS,KACAC,EAAgBV,EAAhBU,iBACAC,EAAgBX,EAAhBW,iBACAC,EAAGZ,EAAHY,IACAC,EAAgBb,EAAhBa,iBACAC,EAAad,EAAbc,cACAC,EAAQf,EAARe,SACAC,EAAahB,EAAbgB,cACAC,EAAYjB,EAAZiB,aACAC,EAAalB,EAAbkB,cACAC,EAAoBnB,EAApBmB,qBAGIC,GAAmBF,aAAA,EAAAA,EAAeG,QAAS,EAAIH,EAAgBD,EAAe,CAACA,GAAgB,GAErG,OACEK,gBAACC,EAAsB,CACrBC,UAAWC,EAAEC,EAAAA,EAAA,CAAA,EAAIC,EAAOC,YAAc1B,GAASyB,EAAOE,YAAc3B,GAAUiB,GAC9EW,MAAQ5B,OAA0B6B,EAAjB,CAAEC,QAAS,IAE5BV,EAAAW,cAACC,EAAQ,CACPzB,KAAMA,EACN0B,QAAShC,EACTe,cAAeE,EACfhB,iBAAkBA,EAClBY,cAAeA,EACfX,aAAcA,EACdC,aAAcA,EACdI,iBAAkBA,EAClBC,iBAAkBA,EAClBC,IAAKA,EACLwB,aAAc7B,EACdM,iBAAkBA,EAClBwB,cAAenC,EACfa,SAAUA,EACVD,cAAeA,EACfN,aAAcA,IAItB"}