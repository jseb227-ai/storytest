{"version":3,"file":"useDropdownMultiCombobox.js","sources":["../../../../../../src/components/DropdownNew/hooks/useDropdownMultiCombobox.ts"],"sourcesContent":["import { useMemo } from \"react\";\nimport useDropdownFiltering from \"./useDropdownFiltering\";\nimport { useMultipleSelection, useCombobox } from \"downshift\";\nimport { type DropdownGroupOption } from \"../Dropdown.types\";\nimport { type BaseListItemData } from \"../../BaseListItem\";\n\nfunction useDropdownMultiCombobox<T extends BaseListItemData<Record<string, unknown>>>(\n  options: DropdownGroupOption<T>,\n  selectedItems: T[],\n  setSelectedItems: (items: T[]) => void,\n  isMenuOpen: boolean,\n  autoFocus?: boolean,\n  defaultValue?: T[],\n  value?: T[],\n  inputValueProp?: string,\n  onChange?: (options: T[]) => void,\n  onInputChange?: (value: string) => void,\n  onMenuOpen?: () => void,\n  onMenuClose?: () => void,\n  onOptionSelect?: (option: T) => void,\n  filterOption?: (option: T, inputValue: string) => boolean,\n  showSelectedOptions?: boolean\n) {\n  // Use controlled value if provided, otherwise use internal state\n  const currentSelectedItems = value !== undefined ? value : selectedItems;\n\n  const { filteredOptions, filterOptions } = useDropdownFiltering<T>(\n    options,\n    filterOption,\n    showSelectedOptions,\n    currentSelectedItems\n  );\n  const flatOptions = useMemo(() => filteredOptions.flatMap(group => group.options), [filteredOptions]);\n  const { getSelectedItemProps, getDropdownProps, addSelectedItem, removeSelectedItem } = useMultipleSelection<T>({\n    selectedItems: currentSelectedItems,\n    initialSelectedItems: defaultValue,\n    onSelectedItemsChange: ({ selectedItems }) => {\n      if (value === undefined) {\n        setSelectedItems(selectedItems || []);\n      }\n      onChange?.(selectedItems || []);\n    }\n  });\n\n  const {\n    isOpen,\n    inputValue,\n    highlightedIndex,\n    getToggleButtonProps,\n    getLabelProps,\n    getMenuProps,\n    getInputProps,\n    getItemProps,\n    reset,\n    openMenu,\n    toggleMenu,\n    closeMenu\n  } = useCombobox<T>({\n    items: flatOptions,\n    itemToString: item => item?.label ?? \"\",\n    isItemDisabled: item => Boolean(item.disabled),\n    isOpen: isMenuOpen,\n    initialIsOpen: autoFocus,\n    initialInputValue: inputValueProp || \"\",\n    onIsOpenChange: ({ isOpen }) => {\n      isOpen ? onMenuClose?.() : onMenuOpen?.();\n    },\n    onInputValueChange: ({ inputValue }) => {\n      filterOptions(inputValue || \"\");\n      onInputChange?.(inputValue || \"\");\n    },\n    onSelectedItemChange: ({ selectedItem: newSelectedItem }) => {\n      if (!newSelectedItem) return;\n      const itemIndex = currentSelectedItems.findIndex(item => item.value === newSelectedItem.value);\n      if (itemIndex > -1) {\n        const newSelectedItems = [\n          ...currentSelectedItems.slice(0, itemIndex),\n          ...currentSelectedItems.slice(itemIndex + 1)\n        ];\n        if (value === undefined) {\n          setSelectedItems(newSelectedItems);\n        }\n        removeSelectedItem(newSelectedItem);\n      } else {\n        const newSelectedItems = [...currentSelectedItems, newSelectedItem];\n        if (value === undefined) {\n          setSelectedItems(newSelectedItems);\n        }\n        addSelectedItem(newSelectedItem);\n      }\n      onOptionSelect?.(newSelectedItem);\n      filterOptions(\"\");\n    },\n    stateReducer: (state, actionAndChanges) => {\n      switch (actionAndChanges.type) {\n        case useCombobox.stateChangeTypes.InputKeyDownEnter:\n        case useCombobox.stateChangeTypes.ItemClick:\n          return { ...actionAndChanges.changes, inputValue: \"\", isOpen: true };\n        case useCombobox.stateChangeTypes.InputBlur:\n          return { ...actionAndChanges.changes, inputValue: \"\" };\n        default:\n          return actionAndChanges.changes;\n      }\n    }\n  });\n\n  return {\n    isOpen,\n    inputValue,\n    highlightedIndex,\n    selectedItems: currentSelectedItems,\n    getSelectedItemProps,\n    getDropdownProps,\n    addSelectedItem,\n    getToggleButtonProps,\n    getLabelProps,\n    getMenuProps,\n    getInputProps,\n    getItemProps,\n    reset,\n    removeSelectedItem,\n    filteredOptions,\n    openMenu,\n    toggleMenu,\n    closeMenu\n  };\n}\n\nexport default useDropdownMultiCombobox;\n"],"names":["useDropdownMultiCombobox","options","selectedItems","setSelectedItems","isMenuOpen","autoFocus","defaultValue","value","inputValueProp","onChange","onInputChange","onMenuOpen","onMenuClose","onOptionSelect","filterOption","showSelectedOptions","currentSelectedItems","undefined","_useDropdownFiltering","useDropdownFiltering","filteredOptions","filterOptions","flatOptions","useMemo","flatMap","group","_useMultipleSelection","useMultipleSelection","initialSelectedItems","onSelectedItemsChange","_ref","getSelectedItemProps","getDropdownProps","addSelectedItem","removeSelectedItem","_useCombobox","useCombobox","items","itemToString","item","_a","label","isItemDisabled","disabled","isOpen","initialIsOpen","initialInputValue","onIsOpenChange","_ref2","onInputValueChange","_ref3","inputValue","onSelectedItemChange","_ref4","newSelectedItem","selectedItem","itemIndex","findIndex","newSelectedItems","concat","_toConsumableArray","slice","stateReducer","state","actionAndChanges","type","stateChangeTypes","InputKeyDownEnter","ItemClick","Object","assign","changes","InputBlur","highlightedIndex","getToggleButtonProps","getLabelProps","getMenuProps","getInputProps","getItemProps","reset","openMenu","toggleMenu","closeMenu"],"mappings":"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"}