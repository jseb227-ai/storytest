{"version":3,"file":"usePopover.js","sources":["../../../../src/hooks/usePopover.ts"],"sourcesContent":["import { useMemo } from \"react\";\nimport { usePopper } from \"react-popper\";\nimport { Placement } from \"./popoverConstants\";\nimport useIsomorphicLayoutEffect from \"./ssr/useIsomorphicLayoutEffect\";\nimport useForceUpdate from \"./useForceUpdate\";\nimport type { Options, State } from \"@popperjs/core\";\nimport { createObserveContentResizeModifier } from \"../components/Dialog/modifiers/observeContentResizeModifier\";\nimport { createObserveReferenceResizeModifier } from \"../components/Dialog/modifiers/observeReferenceResizeModifier\";\nconst { RIGHT_START, RIGHT_END, LEFT_START, LEFT_END } = Placement;\n\nconst DEFAULT_FALLBACK_PLACEMENTS = [RIGHT_END, LEFT_START, LEFT_END];\n\nexport default function usePopover(\n  referenceElement: HTMLElement,\n  popperElement: HTMLElement,\n  {\n    isOpen,\n    placement = RIGHT_START,\n    observeContentResize,\n    observeReferenceResize,\n    offset,\n    fallbackPlacements = DEFAULT_FALLBACK_PLACEMENTS\n  }: {\n    isOpen?: boolean;\n    placement?: Placement;\n    observeContentResize?: boolean;\n    observeReferenceResize?: boolean;\n    offset?: [number, number];\n    fallbackPlacements?: Placement[];\n  }\n) {\n  const forceUpdate = useForceUpdate();\n\n  // we have to use forceUpdate because\n  // usePopper need to run again after any refs changes, even after the first render.\n  useIsomorphicLayoutEffect(() => {\n    forceUpdate();\n  }, [referenceElement, popperElement, forceUpdate]);\n\n  const popperOptions: Pick<Options, \"placement\" | \"modifiers\"> = useMemo(() => {\n    return {\n      placement,\n      modifiers: [\n        {\n          name: \"flip\",\n          options: {\n            fallbackPlacements\n          }\n        },\n        {\n          name: \"displayNone\",\n          enabled: true,\n          phase: \"write\",\n          fn: ({ state }: { state: State }) => {\n            state.styles.popper.visibility = isOpen ? \"visible\" : \"hidden\";\n            return state;\n          }\n        },\n        createObserveContentResizeModifier(observeContentResize),\n        createObserveReferenceResizeModifier(observeReferenceResize),\n        offset !== undefined && {\n          name: \"offset\",\n          options: { offset }\n        }\n      ]\n    };\n  }, [placement, observeContentResize, offset, isOpen]);\n\n  const { styles, attributes } = usePopper(referenceElement, popperElement, popperOptions);\n\n  return { styles, attributes };\n}\n"],"names":["RIGHT_START","Placement","DEFAULT_FALLBACK_PLACEMENTS","RIGHT_END","LEFT_START","LEFT_END","usePopover","referenceElement","popperElement","_ref","isOpen","_ref$placement","placement","observeContentResize","observeReferenceResize","offset","_ref$fallbackPlacemen","fallbackPlacements","forceUpdate","useForceUpdate","useIsomorphicLayoutEffect","popperOptions","useMemo","modifiers","name","options","enabled","phase","fn","_ref2","state","styles","popper","visibility","createObserveContentResizeModifier","createObserveReferenceResizeModifier","undefined","_usePopper","usePopper","attributes"],"mappings":"4bAQA,IAAQA,EAAiDC,EAAjDD,YAEFE,EAA8B,CAFqBD,EAApCE,UAAoCF,EAAzBG,WAAyBH,EAAbI,UAI9B,SAAUC,EACtBC,EACAC,EAA0BC,GAezB,IAbCC,EAAMD,EAANC,OAAMC,EAAAF,EACNG,UAAAA,OAAYZ,IAAHW,EAAGX,EAAWW,EACvBE,EAAoBJ,EAApBI,qBACAC,EAAsBL,EAAtBK,uBACAC,EAAMN,EAANM,OAAMC,EAAAP,EACNQ,mBAAAA,OAAqBf,IAAHc,EAAGd,EAA2Bc,EAU5CE,EAAcC,IAIpBC,GAA0B,WACxBF,GACD,GAAE,CAACX,EAAkBC,EAAeU,IAErC,IAAMG,EAA0DC,GAAQ,WACtE,MAAO,CACLV,UAAAA,EACAW,UAAW,CACT,CACEC,KAAM,OACNC,QAAS,CACPR,mBAAAA,IAGJ,CACEO,KAAM,cACNE,SAAS,EACTC,MAAO,QACPC,GAAI,SAAAC,GAAgC,IAA7BC,EAAKD,EAALC,MAEL,OADAA,EAAMC,OAAOC,OAAOC,WAAavB,EAAS,UAAY,SAC/CoB,CACT,GAEFI,EAAmCrB,GACnCsB,EAAqCrB,QAC1BsB,IAAXrB,GAAwB,CACtBS,KAAM,SACNC,QAAS,CAAEV,OAAAA,KAIlB,GAAE,CAACH,EAAWC,EAAsBE,EAAQL,IAE7C2B,EAA+BC,EAAU/B,EAAkBC,EAAea,GAE1E,MAAO,CAAEU,OAFKM,EAANN,OAESQ,WAFSF,EAAVE,WAGlB"}