{"version":3,"file":"ButtonWrapper.js","sources":["../../../../src/components/ButtonGroup/ButtonWrapper.tsx"],"sourcesContent":["import React from \"react\";\nimport { isNil } from \"es-toolkit\";\nimport Button, { type ButtonProps } from \"../Button/Button\";\nimport Tooltip from \"../Tooltip/Tooltip\";\nimport { type MoveBy } from \"../../types/MoveBy\";\nimport { type TooltipPositions } from \"../Tooltip/Tooltip.types\";\nimport styles from \"./ButtonGroup.module.scss\";\n\nexport interface ButtonWrapperProps extends ButtonProps {\n  /**\n   * The content of the tooltip.\n   */\n  tooltipContent?: string;\n  /**\n   * The position of the tooltip relative to the button.\n   */\n  tooltipPosition?: TooltipPositions;\n  /**\n   * The delay in milliseconds before the tooltip hides.\n   */\n  tooltipHideDelay?: number;\n  /**\n   * The delay in milliseconds before the tooltip shows.\n   */\n  tooltipShowDelay?: number;\n  /**\n   * CSS selector for the tooltip container.\n   */\n  tooltipContainerSelector?: string;\n  /**\n   * Adjusts the tooltip position.\n   */\n  tooltipMoveBy?: MoveBy;\n  /**\n   * If true, makes the button take the full width of its container.\n   */\n  fullWidth?: boolean;\n}\n\nexport const ButtonWrapper = ({\n  tooltipContent,\n  tooltipPosition,\n  tooltipHideDelay,\n  tooltipShowDelay,\n  tooltipContainerSelector,\n  tooltipMoveBy,\n  fullWidth,\n  className,\n  ...otherProps\n}: ButtonWrapperProps) => {\n  const button = <Button {...otherProps} className={className} />;\n\n  if (!isNil(tooltipContent)) {\n    return (\n      <Tooltip\n        moveBy={tooltipMoveBy}\n        position={tooltipPosition}\n        hideDelay={tooltipHideDelay}\n        showDelay={tooltipShowDelay}\n        content={tooltipContent}\n        showTrigger={[\"mouseenter\"]}\n        hideTrigger={[\"mouseleave\"]}\n        containerSelector={tooltipContainerSelector}\n        referenceWrapperClassName={fullWidth ? styles.fullWidth : undefined}\n      >\n        {button}\n      </Tooltip>\n    );\n  }\n\n  // Always wrap in a div when fullWidth to ensure consistent structure\n  if (fullWidth) {\n    return <div className={styles.fullWidth}>{button}</div>;\n  }\n\n  return button;\n};\n"],"names":["ButtonWrapper","_a","tooltipContent","tooltipPosition","tooltipHideDelay","tooltipShowDelay","tooltipContainerSelector","tooltipMoveBy","fullWidth","className","otherProps","__rest","button","React","createElement","Button","Object","assign","isNil","styles","Tooltip","moveBy","position","hideDelay","showDelay","content","showTrigger","hideTrigger","containerSelector","referenceWrapperClassName","undefined"],"mappings":"qOAuCaA,EAAgB,SAACC,OAC5BC,EAOSD,EAPTC,eACAC,EAMSF,EANTE,gBACAC,EAKSH,EALTG,iBACAC,EAISJ,EAJTI,iBACAC,EAGSL,EAHTK,yBACAC,EAESN,EAFTM,cACAC,EACSP,EADTO,UACAC,EAASR,EAATQ,UACGC,EAAUC,EAAAV,EATe,+IAWtBW,EAASC,EAAAC,cAACC,EAAMC,OAAAC,OAAA,CAAA,EAAKP,EAAU,CAAED,UAAWA,KAElD,OAAKS,EAAMhB,GAmBPM,EACKK,EAAAC,cAAA,MAAA,CAAKL,UAAWU,EAAOX,WAAYI,GAGrCA,EArBHC,EAACC,cAAAM,EACC,CAAAC,OAAQd,EACRe,SAAUnB,EACVoB,UAAWnB,EACXoB,UAAWnB,EACXoB,QAASvB,EACTwB,YAAa,CAAC,cACdC,YAAa,CAAC,cACdC,kBAAmBtB,EACnBuB,0BAA2BrB,EAAYW,EAAOX,eAAYsB,GAEzDlB,EAWT"}