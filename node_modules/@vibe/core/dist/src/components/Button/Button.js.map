{"version":3,"file":"Button.js","sources":["../../../../src/components/Button/Button.tsx"],"sourcesContent":["/* eslint-disable react/button-has-type */\nimport React, { type AriaAttributes, forwardRef, useCallback, useEffect, useMemo, useRef } from \"react\";\nimport { camelCase } from \"es-toolkit\";\nimport cx from \"classnames\";\nimport { SIZES } from \"../../constants\";\nimport useMergeRef from \"../../hooks/useMergeRef\";\nimport { NOOP } from \"../../utils/function-utils\";\nimport Icon from \"../../components/Icon/Icon\";\nimport Loader from \"../../components/Loader/Loader\";\nimport {\n  BUTTON_ICON_SIZE,\n  ButtonColor as ButtonColorEnum,\n  ButtonInputType as ButtonInputTypeEnum,\n  ButtonType as ButtonTypeEnum,\n  SMALL_BUTTON_ICON_SIZE\n} from \"./ButtonConstants\";\nimport { type ButtonColor, type ButtonInputType, type ButtonType, type ButtonSize } from \"./Button.types\";\nimport { getParentBackgroundColorNotTransparent, TRANSPARENT_COLOR } from \"./helper/dom-helpers\";\nimport { getTestId } from \"../../tests/test-ids-utils\";\nimport { type SubIcon, type VibeComponentProps, withStaticProps } from \"../../types\";\nimport { getStyle } from \"../../helpers/typesciptCssModulesHelper\";\nimport { ComponentDefaultTestId, ComponentVibeId } from \"../../tests/constants\";\nimport styles from \"./Button.module.scss\";\nimport { useButtonLoading } from \"./helper/useButtonLoading\";\n\nexport interface ButtonProps extends VibeComponentProps {\n  children: React.ReactNode;\n  /** Custom class names to pass to the component */\n  className?: string;\n  activeButtonClassName?: string;\n  /** The button's kind */\n  kind?: ButtonType;\n  /** Callback function to run when the button is clicked */\n  onClick?: (event: React.MouseEvent<HTMLButtonElement>) => void;\n  onMouseDown?: (event: React.MouseEvent<HTMLButtonElement>) => void;\n  /** Blur on button click */\n  blurOnMouseUp?: boolean;\n  /** Name of the button - for form submit usages  */\n  name?: string;\n  /** The button's size */\n  size?: ButtonSize;\n  /** The button's color */\n  color?: ButtonColor;\n  /** The button's type */\n  type?: ButtonInputType;\n  /** Whether the button should be disabled or not */\n  disabled?: boolean;\n  /** Icon to place on the right */\n  rightIcon?: SubIcon;\n  /** Icon to place on the left */\n  leftIcon?: SubIcon;\n  /** the success props are used when you have async action and wants to display a success message */\n  success?: boolean;\n  /** Success icon name */\n  successIcon?: SubIcon;\n  /** Success text */\n  successText?: string;\n  /** loading boolean which switches the text to a loader */\n  loading?: boolean;\n  /** className which is applied to loader container **/\n  loaderClassName?: string;\n  style?: React.CSSProperties;\n  /** displays the active state */\n  active?: boolean;\n  /** id to pass to the button */\n  id?: string;\n  /** adds 8px margin to the right */\n  marginRight?: boolean;\n  /** adds 8px margin to the left */\n  marginLeft?: boolean;\n  /** element id to describe the button accordingly */\n  ariaLabeledBy?: string;\n  /** aria label to provide important when providing only Icon */\n  ariaLabel?: string;\n  /** aria for a button popup */\n  ariaHasPopup?: React.HTMLProps<HTMLButtonElement>[\"aria-haspopup\"];\n  /** aria to be set if the popup is open */\n  ariaExpanded?: boolean;\n  /** aria controls - receives id for the controlled region */\n  ariaControls?: string;\n  \"aria-describedby\"?: AriaAttributes[\"aria-describedby\"];\n  /**\n   * aria to be used for screen reader to know if the button is hidden\n   */\n  \"aria-hidden\"?: AriaAttributes[\"aria-hidden\"];\n  /**\n   * Indicates the current \"pressed\" state of toggle buttons\n   */\n  \"aria-pressed\"?: AriaAttributes[\"aria-pressed\"];\n  /** On Button Focus callback */\n  onFocus?: (event: React.FocusEvent<HTMLButtonElement>) => void;\n  /** On Button Blur callback */\n  onBlur?: (event: React.FocusEvent<HTMLButtonElement>) => void;\n  rightFlat?: boolean;\n  leftFlat?: boolean;\n  preventClickAnimation?: boolean;\n  noSidePadding?: boolean;\n  /** default color for text color in ON_PRIMARY_COLOR kind (should be any type of css color (rbg, var, hex...) */\n  defaultTextColorOnPrimaryColor?: string;\n  \"data-testid\"?: string;\n  /** Change the focus indicator from around the button to within it */\n  insetFocus?: boolean;\n  /** Specifies the tab order of an element */\n  tabIndex?: number;\n}\n\nconst Button = forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      className,\n      children,\n      kind = \"primary\",\n      onClick = NOOP,\n      name,\n      size = \"medium\",\n      color = \"primary\",\n      disabled = false,\n      rightIcon = null,\n      leftIcon = null,\n      success = false,\n      successText = \"\",\n      successIcon = null,\n      style,\n      loading: isLoading = false,\n      loaderClassName,\n      active = false,\n      activeButtonClassName,\n      id,\n      marginRight = false,\n      marginLeft = false,\n      type = \"button\",\n      onMouseDown = NOOP,\n      ariaLabel,\n      rightFlat = false,\n      leftFlat = false,\n      preventClickAnimation = false,\n      noSidePadding = false,\n      onFocus = NOOP,\n      onBlur = NOOP,\n      ariaLabeledBy,\n      defaultTextColorOnPrimaryColor = TRANSPARENT_COLOR,\n      ariaHasPopup,\n      ariaExpanded,\n      ariaControls,\n      \"aria-describedby\": ariaDescribedBy,\n      \"aria-hidden\": ariaHidden,\n      \"aria-pressed\": ariaPressed,\n      blurOnMouseUp = true,\n      \"data-testid\": dataTestId,\n      insetFocus = false,\n      tabIndex\n    }: ButtonProps,\n    ref\n  ) => {\n    const buttonRef = useRef<HTMLButtonElement>(null);\n    const mergedRef = useMergeRef(ref, buttonRef);\n\n    const { loading } = useButtonLoading({ isLoading });\n\n    useEffect(() => {\n      if (color !== \"on-primary-color\" && color !== \"fixed-light\") return;\n      if (kind !== \"primary\") return;\n      if (!buttonRef.current) return;\n\n      const buttonElement = buttonRef.current;\n      buttonElement.style.color = getParentBackgroundColorNotTransparent(buttonElement, defaultTextColorOnPrimaryColor);\n    }, [kind, buttonRef, color, defaultTextColorOnPrimaryColor]);\n\n    const onMouseUp = useCallback(() => {\n      const button = buttonRef.current;\n      if (disabled || !button) {\n        return;\n      }\n      if (blurOnMouseUp) {\n        button.blur();\n      }\n    }, [disabled, buttonRef, blurOnMouseUp]);\n\n    const onButtonClicked = useCallback(\n      (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        if (disabled || loading || success) {\n          event.preventDefault();\n          return;\n        }\n\n        if (onClick) {\n          onClick(event);\n        }\n      },\n      [onClick, disabled, loading, success]\n    );\n\n    const onMouseDownClicked = useCallback(\n      (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        if (disabled || loading || success) {\n          event.preventDefault();\n          return;\n        }\n\n        if (onMouseDown) {\n          onMouseDown(event);\n        }\n      },\n      [onMouseDown, disabled, loading, success]\n    );\n\n    const classNames = useMemo(() => {\n      const calculatedColor = success ? \"positive\" : color;\n      return cx(\n        className,\n        styles.button,\n        getStyle(styles, camelCase(\"size-\" + size)),\n        getStyle(styles, camelCase(\"kind-\" + kind)),\n        getStyle(styles, camelCase(\"color-\" + calculatedColor)),\n        {\n          [styles.success]: success,\n          [getStyle(styles, camelCase(\"color-\" + calculatedColor + \"-active\"))]: active,\n          [activeButtonClassName]: active,\n          [styles.marginRight]: marginRight,\n          [styles.marginLeft]: marginLeft,\n          [styles.rightFlat]: rightFlat,\n          [styles.leftFlat]: leftFlat,\n          [styles.preventClickAnimation]: preventClickAnimation,\n          [styles.noSidePadding]: noSidePadding,\n          [styles.disabled]: disabled,\n          [styles.insetFocusStyle]: insetFocus\n        }\n      );\n    }, [\n      success,\n      color,\n      className,\n      size,\n      kind,\n      active,\n      activeButtonClassName,\n      marginRight,\n      marginLeft,\n      rightFlat,\n      leftFlat,\n      preventClickAnimation,\n      noSidePadding,\n      disabled,\n      insetFocus\n    ]);\n\n    const buttonProps = useMemo(() => {\n      const props: Record<string, unknown> = {\n        ref: mergedRef,\n        type,\n        className: classNames,\n        name,\n        onMouseUp,\n        style,\n        onClick: onButtonClicked,\n        id,\n        onFocus,\n        onBlur,\n        tabIndex: disabled || ariaHidden ? -1 : tabIndex,\n        \"data-testid\": dataTestId || getTestId(ComponentDefaultTestId.BUTTON, id),\n        \"data-vibe\": ComponentVibeId.BUTTON,\n        onMouseDown: onMouseDownClicked,\n        \"aria-disabled\": disabled,\n        \"aria-busy\": loading,\n        \"aria-labelledby\": ariaLabeledBy,\n        \"aria-label\": ariaLabel,\n        \"aria-haspopup\": ariaHasPopup,\n        \"aria-expanded\": ariaExpanded,\n        \"aria-controls\": ariaControls,\n        \"aria-describedby\": ariaDescribedBy,\n        \"aria-hidden\": ariaHidden,\n        \"aria-pressed\": ariaPressed\n      };\n      return props;\n    }, [\n      mergedRef,\n      type,\n      classNames,\n      name,\n      onMouseUp,\n      style,\n      onButtonClicked,\n      id,\n      onFocus,\n      onBlur,\n      tabIndex,\n      dataTestId,\n      onMouseDownClicked,\n      disabled,\n      loading,\n      ariaLabeledBy,\n      ariaLabel,\n      ariaHasPopup,\n      ariaExpanded,\n      ariaControls,\n      ariaDescribedBy,\n      ariaHidden,\n      ariaPressed\n    ]);\n\n    const iconSize = useCallback(\n      (icon: SubIcon) => {\n        if (typeof icon !== \"function\") return;\n        switch (size) {\n          case \"xxs\":\n          case \"xs\":\n            return SMALL_BUTTON_ICON_SIZE;\n          default:\n            return BUTTON_ICON_SIZE;\n        }\n      },\n      [size]\n    );\n\n    const hasRenderableChildren = useMemo(() => React.Children.toArray(children).some(Boolean), [children]);\n\n    const buttonContent = useMemo(\n      () => (\n        <>\n          {leftIcon ? (\n            <Icon\n              iconType=\"font\"\n              icon={leftIcon}\n              iconSize={iconSize(leftIcon)}\n              className={cx({\n                [styles.leftIcon]: hasRenderableChildren\n              })}\n              ignoreFocusStyle\n            />\n          ) : null}\n          {children}\n          {rightIcon ? (\n            <Icon\n              iconType=\"font\"\n              icon={rightIcon}\n              iconSize={iconSize(rightIcon)}\n              className={cx({\n                [styles.rightIcon]: hasRenderableChildren\n              })}\n              ignoreFocusStyle\n            />\n          ) : null}\n        </>\n      ),\n      [children, hasRenderableChildren, iconSize, leftIcon, rightIcon]\n    );\n\n    if (loading) {\n      return (\n        <button {...buttonProps} key={`${id}-loading`}>\n          <span className={cx(styles.loader, loaderClassName)}>\n            <Loader className={styles.loaderSvg} />\n            <span aria-hidden className={styles.textPlaceholder}>\n              {buttonContent}\n            </span>\n          </span>\n        </button>\n      );\n    }\n\n    if (success) {\n      return (\n        <button {...buttonProps} key={`${id}-success`}>\n          <span className={styles.successContent}>\n            {successIcon ? (\n              <Icon\n                iconType=\"font\"\n                icon={successIcon}\n                iconSize={iconSize(successIcon)}\n                className={cx({\n                  [styles.leftIcon]: !!successText\n                })}\n                ignoreFocusStyle\n              />\n            ) : null}\n            {successText}\n          </span>\n          <span aria-hidden=\"true\" className={styles.textPlaceholder}>\n            {buttonContent}\n          </span>\n        </button>\n      );\n    }\n\n    return (\n      <button {...buttonProps} key={`${id}-button`}>\n        {buttonContent}\n      </button>\n    );\n  }\n);\n\ninterface ButtonStaticProps {\n  sizes: typeof SIZES;\n  colors: typeof ButtonColorEnum;\n  kinds: typeof ButtonTypeEnum;\n  types: typeof ButtonInputTypeEnum;\n  inputTags: typeof ButtonInputTypeEnum;\n}\n\nexport default withStaticProps<ButtonProps, ButtonStaticProps>(Button, {\n  sizes: SIZES,\n  colors: ButtonColorEnum,\n  kinds: ButtonTypeEnum,\n  types: ButtonInputTypeEnum,\n  inputTags: ButtonInputTypeEnum\n});\n"],"names":["withStaticProps","forwardRef","_ref","ref","className","children","_ref$kind","kind","_ref$onClick","onClick","NOOP","name","_ref$size","size","_ref$color","color","_ref$disabled","disabled","_ref$rightIcon","rightIcon","_ref$leftIcon","leftIcon","_ref$success","success","_ref$successText","successText","_ref$successIcon","successIcon","style","_ref$loading","loading","isLoading","loaderClassName","_ref$active","active","activeButtonClassName","id","_ref$marginRight","marginRight","_ref$marginLeft","marginLeft","_ref$type","type","_ref$onMouseDown","onMouseDown","ariaLabel","_ref$rightFlat","rightFlat","_ref$leftFlat","leftFlat","_ref$preventClickAnim","preventClickAnimation","_ref$noSidePadding","noSidePadding","_ref$onFocus","onFocus","_ref$onBlur","onBlur","ariaLabeledBy","_ref$defaultTextColor","defaultTextColorOnPrimaryColor","TRANSPARENT_COLOR","ariaHasPopup","ariaExpanded","ariaControls","ariaDescribedBy","ariaHidden","ariaPressed","_ref$blurOnMouseUp","blurOnMouseUp","dataTestId","_ref$insetFocus","insetFocus","tabIndex","buttonRef","useRef","mergedRef","useMergeRef","useButtonLoading","useEffect","current","buttonElement","getParentBackgroundColorNotTransparent","onMouseUp","useCallback","button","blur","onButtonClicked","event","preventDefault","onMouseDownClicked","classNames","useMemo","_cx","calculatedColor","cx","styles","getStyle","camelCase","_defineProperty","insetFocusStyle","buttonProps","getTestId","ComponentDefaultTestId","BUTTON","ComponentVibeId","iconSize","icon","SMALL_BUTTON_ICON_SIZE","BUTTON_ICON_SIZE","hasRenderableChildren","React","Children","toArray","some","Boolean","buttonContent","createElement","Fragment","Icon","iconType","ignoreFocusStyle","key","concat","loader","Loader","loaderSvg","textPlaceholder","successContent","Object","assign","sizes","SIZES","colors","ButtonColorEnum","kinds","ButtonTypeEnum","types","ButtonInputTypeEnum","inputTags"],"mappings":"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"}