{"version":3,"file":"dropdownUtils.js","sources":["../../../../../src/components/DropdownNew/utils/dropdownUtils.ts"],"sourcesContent":["import { type BaseListItemData } from \"../../BaseListItem\";\nimport { type ListGroup } from \"../../BaseList\";\n\nexport function normalizeOptions<Item extends BaseListItemData>(\n  options: ListGroup<Item>[] | BaseListItemData<Item>[],\n  filter?: string,\n  filterOption?: (option: Item, inputValue: string) => boolean,\n  showSelectedOptions = true,\n  selectedItems: Item[] = []\n): ListGroup<Item>[] {\n  let indexCounter = 0;\n  const defaultFilterFn = (item: Item, inputValue: string) =>\n    !inputValue || item.label.toLowerCase().includes(inputValue.toLowerCase());\n  const currentFilterFn = filterOption || defaultFilterFn;\n\n  const isItemSelected = (item: Item) => selectedItems.some(selected => selected.value === item.value);\n\n  return Array.isArray(options) && options.some(item => \"options\" in item)\n    ? (options as ListGroup<Item>[]).flatMap(group => {\n        const filteredGroupOptions = group.options\n          .filter(item => {\n            const matchesFilter = currentFilterFn(item, filter || \"\");\n            if (!showSelectedOptions && isItemSelected(item)) {\n              return false;\n            }\n            return matchesFilter;\n          })\n          .map(item => ({ ...item, index: indexCounter++ }));\n\n        return filteredGroupOptions.length > 0 ? [{ ...group, options: filteredGroupOptions }] : [];\n      })\n    : [\n        {\n          label: undefined,\n          options: (options as BaseListItemData<Item>[])\n            .filter(item => {\n              const matchesFilter = currentFilterFn(item, filter || \"\");\n              if (!showSelectedOptions && isItemSelected(item)) {\n                return false;\n              }\n              return matchesFilter;\n            })\n            .map(item => ({ ...item, index: indexCounter++ }))\n        }\n      ];\n}\n"],"names":["normalizeOptions","options","filter","filterOption","showSelectedOptions","arguments","length","undefined","selectedItems","indexCounter","currentFilterFn","item","inputValue","label","toLowerCase","includes","isItemSelected","some","selected","value","Array","isArray","flatMap","group","filteredGroupOptions","matchesFilter","map","Object","assign","index"],"mappings":"AAGgB,SAAAA,EACdC,EACAC,EACAC,GAE0B,IAD1BC,EAAmB,GAAAC,UAAAC,aAAAC,IAAAF,UAAA,IAAAA,UAAA,GACnBG,yDAAwB,GAEpBC,EAAe,EAGbC,EAAkBP,GAFA,SAACQ,EAAYC,GAAkB,OACpDA,GAAcD,EAAKE,MAAMC,cAAcC,SAASH,EAAWE,cAAc,EAGtEE,EAAiB,SAACL,GAAU,OAAKH,EAAcS,MAAK,SAAAC,GAAQ,OAAIA,EAASC,QAAUR,EAAKQ,QAAM,EAEpG,OAAOC,MAAMC,QAAQpB,IAAYA,EAAQgB,MAAK,SAAAN,GAAI,MAAI,YAAaA,CAAI,IAClEV,EAA8BqB,SAAQ,SAAAC,GACrC,IAAMC,EAAuBD,EAAMtB,QAChCC,QAAO,SAAAS,GACN,IAAMc,EAAgBf,EAAgBC,EAAMT,GAAU,IACtD,SAAKE,GAAuBY,EAAeL,KAGpCc,CACT,IACCC,KAAI,SAAAf,GAAI,OAAUgB,OAAAC,OAAAD,OAAAC,OAAA,CAAA,EAAAjB,GAAM,CAAAkB,MAAOpB,KAAc,IAEhD,OAAOe,EAAqBlB,OAAS,EAAI,CAAAqB,OAAAC,OAAAD,OAAAC,OAAA,GAAML,GAAO,CAAAtB,QAASuB,KAA0B,EAC1F,IACD,CACE,CACEX,WAAON,EACPN,QAAUA,EACPC,QAAO,SAAAS,GACN,IAAMc,EAAgBf,EAAgBC,EAAMT,GAAU,IACtD,SAAKE,GAAuBY,EAAeL,KAGpCc,CACT,IACCC,KAAI,SAAAf,GAAI,OAAIgB,OAAAC,OAAAD,OAAAC,OAAA,CAAA,EAAMjB,GAAI,CAAEkB,MAAOpB,UAG5C"}