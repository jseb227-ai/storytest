{"version":3,"file":"DropdownMultiComboboxController.js","sources":["../../../../../src/components/DropdownNew/modes/DropdownMultiComboboxController.tsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport { type DropdownMultiControllerProps } from \"../Dropdown.types\";\nimport useDropdownMultiCombobox from \"../hooks/useDropdownMultiCombobox\";\nimport { type BaseListItemData } from \"../../BaseListItem\";\nimport { type DropdownContextProps } from \"../context/DropdownContext.types\";\nimport DropdownWrapperUI from \"../components/DropdownWrapperUI\";\n\nconst DropdownMultiComboboxController = <Item extends BaseListItemData<Record<string, unknown>>>(\n  props: DropdownMultiControllerProps<Item>\n) => {\n  const {\n    options,\n    isMenuOpen: isMenuOpenProp,\n    autoFocus,\n    defaultValue,\n    value,\n    inputValue: inputValueProp,\n    onChange,\n    onInputChange,\n    onMenuClose,\n    onMenuOpen,\n    onOptionSelect,\n    filterOption,\n    showSelectedOptions = true,\n    clearable = true,\n    searchable = true,\n    multi = true,\n    closeMenuOnSelect = true,\n    dropdownRef,\n    onFocus,\n    onBlur,\n    onKeyDown,\n    onClear,\n    onOptionRemove,\n    loading = false,\n    size = \"medium\"\n  } = props;\n\n  const initialMultiSelectedItems = Array.isArray(defaultValue) ? defaultValue : [];\n  const [multiSelectedItemsState, setMultiSelectedItemsState] = useState<Item[]>(initialMultiSelectedItems);\n  const [isFocused, setIsFocused] = useState(false);\n\n  const {\n    isOpen,\n    inputValue: hookInputValue,\n    highlightedIndex,\n    getToggleButtonProps,\n    getLabelProps,\n    getMenuProps,\n    getItemProps,\n    getInputProps: hookGetInputProps,\n    reset: hookReset,\n    toggleMenu,\n    filteredOptions,\n    selectedItems: hookSelectedItems,\n    addSelectedItem: hookAddSelectedItem,\n    removeSelectedItem: hookRemoveSelectedItem,\n    getDropdownProps\n  } = useDropdownMultiCombobox<Item>(\n    options,\n    multiSelectedItemsState,\n    setMultiSelectedItemsState,\n    isMenuOpenProp,\n    autoFocus,\n    defaultValue,\n    value,\n    inputValueProp,\n    onChange,\n    onInputChange,\n    onMenuClose,\n    onMenuOpen,\n    onOptionSelect,\n    filterOption,\n    showSelectedOptions\n  );\n\n  const contextValue: DropdownContextProps<Item> = {\n    ...props,\n    isOpen,\n    inputValue: hookInputValue ?? null,\n    highlightedIndex,\n    selectedItems: hookSelectedItems || [],\n    filteredOptions,\n    getToggleButtonProps,\n    getLabelProps,\n    getMenuProps,\n    getItemProps,\n    getInputProps: (inputOptions?: any) => {\n      return hookGetInputProps!({\n        ...(inputOptions || {}),\n        disabled: props.readOnly || props.disabled,\n        onFocus: (event: React.FocusEvent<HTMLInputElement>) => {\n          setIsFocused(true);\n          onFocus?.(event as any);\n          inputOptions?.onFocus?.(event);\n        },\n        onBlur: (event: React.FocusEvent<HTMLInputElement>) => {\n          setIsFocused(false);\n          onBlur?.(event);\n          inputOptions?.onBlur?.(event);\n        },\n        onKeyDown: (event: React.KeyboardEvent<HTMLInputElement>) => {\n          onKeyDown?.(event);\n          inputOptions?.onKeyDown?.(event);\n        }\n      });\n    },\n    reset: hookReset,\n    contextOnClear: () => {\n      hookReset();\n      if (value === undefined) {\n        setMultiSelectedItemsState([]);\n      }\n      onClear?.();\n    },\n    contextOnOptionRemove: (option: Item) => {\n      if (hookRemoveSelectedItem) {\n        hookRemoveSelectedItem(option);\n      }\n      onOptionRemove?.(option);\n    },\n    addSelectedItem: hookAddSelectedItem,\n    removeSelectedItem: hookRemoveSelectedItem,\n    isFocused,\n    clearable,\n    searchable,\n    multi,\n    closeMenuOnSelect,\n    size,\n    getDropdownProps,\n    toggleMenu,\n    loading\n  };\n\n  return <DropdownWrapperUI contextValue={contextValue} dropdownRef={dropdownRef} />;\n};\n\nexport default DropdownMultiComboboxController;\n"],"names":["DropdownMultiComboboxController","props","options","isMenuOpenProp","isMenuOpen","autoFocus","defaultValue","value","inputValueProp","inputValue","onChange","onInputChange","onMenuClose","onMenuOpen","onOptionSelect","filterOption","_props$showSelectedOp","showSelectedOptions","_props$clearable","clearable","_props$searchable","searchable","_props$multi","multi","_props$closeMenuOnSel","closeMenuOnSelect","dropdownRef","onFocus","onBlur","onKeyDown","onClear","onOptionRemove","_props$loading","loading","_props$size","size","_useState","useState","Array","isArray","_useState2","_slicedToArray","multiSelectedItemsState","setMultiSelectedItemsState","_useState3","_useState4","isFocused","setIsFocused","_useDropdownMultiComb","useDropdownMultiCombobox","isOpen","hookInputValue","highlightedIndex","getToggleButtonProps","getLabelProps","getMenuProps","getItemProps","hookGetInputProps","getInputProps","hookReset","reset","toggleMenu","filteredOptions","hookSelectedItems","selectedItems","hookAddSelectedItem","addSelectedItem","hookRemoveSelectedItem","removeSelectedItem","getDropdownProps","contextValue","Object","assign","inputOptions","disabled","readOnly","event","_a","call","contextOnClear","undefined","contextOnOptionRemove","option","React","createElement","DropdownWrapperUI"],"mappings":"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"}