{"version":3,"file":"DropdownContext.js","sources":["../../../../../src/components/DropdownNew/context/DropdownContext.ts"],"sourcesContent":["import type React from \"react\";\nimport { createContext, useContext } from \"react\";\nimport { type ListGroup } from \"../../BaseList\";\nimport { type BaseListItemData } from \"../../BaseListItem\";\nimport { type BaseDropdownProps, type DropdownSizes } from \"../Dropdown.types\";\nimport { type DropdownContextProps } from \"./DropdownContext.types\";\n\ntype PropGetter = (options?: any) => Record<string, any>;\ntype ItemPropGetter<Item> = (options: { item: Item; index: number }) => Record<string, any>;\n\nexport interface DropdownContextValue<Item extends BaseListItemData<Record<string, unknown>> = any> {\n  isOpen: boolean;\n  inputValue: string | null;\n  highlightedIndex: number | null;\n  selectedItem: Item | null | undefined;\n  selectedItems: Item[];\n  filteredOptions: ListGroup<Item>[];\n\n  getToggleButtonProps: PropGetter;\n  getLabelProps: PropGetter;\n  getMenuProps: PropGetter;\n  getInputProps: PropGetter;\n  getItemProps: ItemPropGetter<Item>;\n  getDropdownProps?: PropGetter;\n\n  reset: () => void;\n  toggleMenu: () => void;\n  onClear?: () => void;\n  onOptionSelect?: (option: Item) => void;\n  onOptionRemove?: (option: Item) => void;\n  addSelectedItem?: (item: Item) => void;\n  removeSelectedItem?: (item: Item) => void;\n  setSelectedItems?: (items: Item[]) => void;\n\n  searchable?: boolean;\n  multi?: boolean;\n  multiline?: boolean;\n  disabled?: boolean;\n  readOnly?: boolean;\n  size?: DropdownSizes;\n  optionRenderer?: BaseDropdownProps<Item>[\"optionRenderer\"];\n  valueRenderer?: BaseDropdownProps<Item>[\"valueRenderer\"];\n  noOptionsMessage?: BaseDropdownProps<Item>[\"noOptionsMessage\"];\n  placeholder?: BaseDropdownProps<Item>[\"placeholder\"];\n  withGroupDivider?: BaseDropdownProps<Item>[\"withGroupDivider\"];\n  stickyGroupTitle?: BaseDropdownProps<Item>[\"stickyGroupTitle\"];\n  maxMenuHeight?: BaseDropdownProps<Item>[\"maxMenuHeight\"];\n  clearable?: boolean;\n  autoFocus?: boolean;\n  isFocused?: boolean;\n  inputAriaLabel?: string;\n  menuAriaLabel?: string;\n  closeMenuOnSelect?: boolean;\n  dir?: BaseDropdownProps<Item>[\"dir\"];\n  originalOnFocus?: (event: React.FocusEvent<HTMLInputElement>) => void;\n  originalOnBlur?: (event: React.FocusEvent<HTMLInputElement>) => void;\n  originalOnKeyDown?: (event: React.KeyboardEvent<HTMLInputElement>) => void;\n  originalOnScroll?: (event: React.UIEvent<HTMLUListElement>) => void;\n}\n\nexport const DropdownContext = createContext<DropdownContextProps<any> | undefined>(undefined);\n\nexport function useDropdownContext<Item extends BaseListItemData<Record<string, unknown>>>() {\n  const context = useContext(DropdownContext) as DropdownContextProps<Item>;\n  if (context === undefined) {\n    throw new Error(\"useDropdownContext must be used within a DropdownProvider\");\n  }\n  return context;\n}\n"],"names":["DropdownContext","createContext","undefined","useDropdownContext","context","useContext","Error"],"mappings":"0DA4DaA,EAAkBC,OAAqDC,YAEpEC,IACd,IAAMC,EAAUC,EAAWL,GAC3B,QAAgBE,IAAZE,EACF,MAAUE,MAAM,6DAElB,OAAOF,CACT"}