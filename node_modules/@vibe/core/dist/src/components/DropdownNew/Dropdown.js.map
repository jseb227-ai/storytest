{"version":3,"file":"Dropdown.js","sources":["../../../../src/components/DropdownNew/Dropdown.tsx"],"sourcesContent":["import React, { useRef, forwardRef } from \"react\";\nimport {\n  type BaseDropdownProps,\n  type DropdownMultiControllerProps,\n  type DropdownSingleControllerProps\n} from \"./Dropdown.types\";\nimport useMergeRef from \"../../hooks/useMergeRef\";\nimport { type BaseListItemData } from \"../BaseListItem\";\nimport DropdownComboboxController from \"./modes/DropdownComboboxController\";\nimport DropdownMultiComboboxController from \"./modes/DropdownMultiComboboxController\";\nimport DropdownSelectController from \"./modes/DropdownSelectController\";\nimport DropdownMultiSelectController from \"./modes/DropdownMultiSelectController\";\n\nconst Dropdown = forwardRef(\n  <Item extends BaseListItemData<Record<string, unknown>>>(\n    dropdownProps: BaseDropdownProps<Item>,\n    ref: React.ForwardedRef<HTMLDivElement>\n  ) => {\n    const isSearchable = Boolean(dropdownProps.searchable);\n\n    const dropdownInternalRef = useRef<HTMLDivElement>(null);\n    const dropdownMergedRef = useMergeRef(ref, dropdownInternalRef);\n\n    if (isMultiType(dropdownProps)) {\n      return isSearchable ? (\n        <DropdownMultiComboboxController {...dropdownProps} dropdownRef={dropdownMergedRef} />\n      ) : (\n        <DropdownMultiSelectController {...dropdownProps} dropdownRef={dropdownMergedRef} />\n      );\n    }\n\n    if (isSingleType(dropdownProps)) {\n      return isSearchable ? (\n        <DropdownComboboxController {...dropdownProps} dropdownRef={dropdownMergedRef} />\n      ) : (\n        <DropdownSelectController {...dropdownProps} dropdownRef={dropdownMergedRef} />\n      );\n    }\n\n    return null;\n  }\n);\n\nexport default Dropdown as <Item extends BaseListItemData<Record<string, unknown>>>(\n  props: BaseDropdownProps<Item> & { ref?: React.ForwardedRef<HTMLDivElement> }\n) => React.ReactElement;\n\nfunction isMultiType(dropdownProps: BaseDropdownProps<any>): dropdownProps is DropdownMultiControllerProps<any> {\n  return dropdownProps.multi;\n}\n\nfunction isSingleType(dropdownProps: BaseDropdownProps<any>): dropdownProps is DropdownSingleControllerProps<any> {\n  return !dropdownProps.multi;\n}\n"],"names":["Dropdown","forwardRef","dropdownProps","ref","isSearchable","searchable","dropdownInternalRef","useRef","dropdownMergedRef","useMergeRef","multi","isMultiType","React","createElement","DropdownMultiComboboxController","DropdownMultiSelectController","Object","assign","dropdownRef","isSingleType","DropdownComboboxController","DropdownSelectController"],"mappings":"sTAaMA,IAAAA,EAAWC,GACf,SACEC,EACAC,GAEA,IAAMC,IAAuBF,EAAcG,WAErCC,EAAsBC,EAAuB,MAC7CC,EAAoBC,EAAYN,EAAKG,GAE3C,OAwBJ,SAAqBJ,GACnB,OAAOA,EAAcQ,KACvB,CA1BQC,CAAYT,GAEZU,EAAAC,cADKT,EACJU,EAEAC,EAF+BC,OAAAC,OAAA,CAAA,EAAKf,EAAa,CAAEgB,YAAaV,KA0BzE,SAAsBN,GACpB,OAAQA,EAAcQ,KACxB,CAtBQS,CAAajB,GAEbU,EAAAC,cADKT,EACJgB,EAEAC,EAF0BL,OAAAC,OAAA,CAAA,EAAKf,EAAa,CAAEgB,YAAaV,KAMzD,IACT"}