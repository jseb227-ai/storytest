{"version":3,"file":"TableVirtualizedBody.js","sources":["../../../../../src/components/Table/TableVirtualizedBody/TableVirtualizedBody.tsx"],"sourcesContent":["import React, { type ComponentType, forwardRef, useCallback, useEffect, useMemo } from \"react\";\nimport { type VibeComponentProps } from \"../../../types\";\nimport TableBody from \"../TableBody/TableBody\";\nimport styles from \"./TableVirtualizedBody.module.scss\";\nimport { FixedSizeList as List, type ListChildComponentProps, type ScrollDirection } from \"react-window\";\nimport { useTable } from \"../context/TableContext/TableContext\";\nimport cx from \"classnames\";\nimport { getTestId } from \"../../../tests/test-ids-utils\";\nimport { ComponentDefaultTestId } from \"../../../tests/constants\";\nimport { RowHeights } from \"../Table/TableConsts\";\nimport AutoSizer, { type Size as AutoSizerSize } from \"react-virtualized-auto-sizer\";\nimport { useTableRowMenu } from \"../context/TableRowMenuContext/TableRowMenuContext\";\nimport { type TableColumn } from \"../Table/Table\";\n\nexport type TableVirtualizedRow = Record<string, unknown> & { id: string };\n\nexport interface TableVirtualizedBodyProps<T extends TableVirtualizedRow = TableVirtualizedRow>\n  extends VibeComponentProps {\n  /**\n   * The list of items to render in the virtualized table.\n   */\n  items: T[];\n  /**\n   * Function to render a row in the table.\n   */\n  rowRenderer: (item: T) => JSX.Element;\n  /**\n   * Callback function triggered on scroll.\n   */\n  onScroll?: (horizontalScrollDirection: ScrollDirection, scrollTop: number, scrollUpdateWasRequested: boolean) => void;\n  /**\n   * The columns configuration for the table.\n   */\n  columns?: TableColumn[];\n  /**\n   * Function to render the table header.\n   */\n  headerRenderer?: (columns: TableColumn[]) => JSX.Element;\n  /**\n   * Number of rows to render above/below the visible area.\n   */\n  overscanCount?: number;\n}\n\nconst MemoizedRow = React.memo(\n  <T extends TableVirtualizedRow>({\n    item,\n    rowRenderer,\n    style\n  }: {\n    item: T;\n    rowRenderer: (item: T) => JSX.Element;\n    style: React.CSSProperties;\n  }) => {\n    const element = rowRenderer(item);\n    const { width: _width, ...styleWithoutWidth } = style;\n    return React.cloneElement(element, {\n      style: { ...styleWithoutWidth, ...element.props?.style }\n    });\n  }\n);\n\nconst TableVirtualizedBody = forwardRef(\n  <T extends TableVirtualizedRow = TableVirtualizedRow>(\n    {\n      items,\n      rowRenderer,\n      onScroll,\n      columns,\n      headerRenderer,\n      id,\n      className,\n      \"data-testid\": dataTestId,\n      overscanCount = 1\n    }: TableVirtualizedBodyProps<T>,\n    ref: React.ForwardedRef<HTMLDivElement>\n  ) => {\n    const { size, virtualizedListRef, onVirtualizedListScroll, markTableAsVirtualized, dataState } = useTable();\n    const { resetHoveredRow } = useTableRowMenu();\n    const virtualizedWithHeader = !!columns && !!headerRenderer;\n    const { isLoading } = dataState || {};\n\n    const handleOuterScroll = useCallback(\n      (e: Event) => {\n        const target = e.target as HTMLDivElement;\n        resetHoveredRow();\n        onVirtualizedListScroll({\n          target,\n          currentTarget: target\n        } as unknown as React.UIEvent<HTMLDivElement>);\n      },\n      [resetHoveredRow, onVirtualizedListScroll]\n    );\n\n    useEffect(() => {\n      const scrollElement = virtualizedListRef.current;\n      if (!scrollElement) return;\n\n      scrollElement.addEventListener(\"scroll\", handleOuterScroll);\n\n      return () => {\n        scrollElement.removeEventListener(\"scroll\", handleOuterScroll);\n      };\n    }, [handleOuterScroll, virtualizedListRef]);\n\n    const handleVirtualizedVerticalScroll = useCallback(\n      ({\n        scrollDirection,\n        scrollOffset,\n        scrollUpdateWasRequested\n      }: {\n        scrollDirection: ScrollDirection;\n        scrollOffset: number;\n        scrollUpdateWasRequested: boolean;\n      }) => {\n        if (virtualizedWithHeader) return;\n        onScroll?.(scrollDirection, scrollOffset, scrollUpdateWasRequested);\n      },\n      [onScroll, virtualizedWithHeader]\n    );\n\n    const itemRenderer = useCallback<ComponentType<ListChildComponentProps<T>>>(\n      ({ index, style }) => {\n        if (virtualizedWithHeader && index === 0) {\n          return null; //placeholder for virtualized with header\n        }\n        const currentIndex = virtualizedWithHeader ? index - 1 : index;\n        const currentItem = items[currentIndex];\n\n        return <MemoizedRow item={currentItem} rowRenderer={rowRenderer} style={style} />;\n      },\n      [items, rowRenderer, virtualizedWithHeader]\n    );\n\n    useEffect(() => {\n      if (!virtualizedWithHeader) markTableAsVirtualized();\n    }, [markTableAsVirtualized, virtualizedWithHeader]);\n\n    const memoizedInnerElementType = useMemo(\n      () =>\n        virtualizedWithHeader\n          ? forwardRef(({ children, ...rest }: any, ref: React.Ref<HTMLDivElement>) => (\n              <div ref={ref} {...rest}>\n                {headerRenderer!(columns!)}\n                {children}\n              </div>\n            ))\n          : undefined,\n      [virtualizedWithHeader, headerRenderer, columns]\n    );\n\n    // When in loading state and we have a header renderer, render header separately\n    if (isLoading && virtualizedWithHeader) {\n      return (\n        <div\n          ref={ref}\n          id={id}\n          className={cx(styles.tableBody, styles.withHeader, className)}\n          data-testid={dataTestId || getTestId(ComponentDefaultTestId.TABLE_VIRTUALIZED_BODY, id)}\n        >\n          {headerRenderer!(columns!)}\n          <TableBody />\n        </div>\n      );\n    }\n\n    return (\n      <TableBody\n        className={cx(\n          styles.tableBody,\n          {\n            [styles.withHeader]: virtualizedWithHeader\n          },\n          className\n        )}\n        id={id}\n        data-testid={dataTestId || getTestId(ComponentDefaultTestId.TABLE_VIRTUALIZED_BODY, id)}\n        ref={ref}\n      >\n        {items?.length && (\n          <AutoSizer>\n            {({ height, width }: AutoSizerSize) => (\n              <List\n                className={styles.tableBodyItems}\n                itemSize={RowHeights[size]}\n                height={height}\n                itemCount={virtualizedWithHeader ? items.length + 1 : items.length}\n                width={width}\n                overscanCount={overscanCount}\n                onScroll={handleVirtualizedVerticalScroll}\n                outerRef={element => {\n                  virtualizedListRef.current = element;\n                }}\n                innerElementType={memoizedInnerElementType}\n              >\n                {itemRenderer}\n              </List>\n            )}\n          </AutoSizer>\n        )}\n      </TableBody>\n    );\n  }\n);\n\nexport default TableVirtualizedBody;\n"],"names":["MemoizedRow","React","memo","_ref","style","element","rowRenderer","item","styleWithoutWidth","__rest","cloneElement","Object","assign","_a","props","TableVirtualizedBody","forwardRef","_ref2","ref","items","onScroll","columns","headerRenderer","id","className","dataTestId","_ref2$overscanCount","overscanCount","_useTable","useTable","size","virtualizedListRef","onVirtualizedListScroll","markTableAsVirtualized","dataState","resetHoveredRow","useTableRowMenu","virtualizedWithHeader","isLoading","handleOuterScroll","useCallback","e","target","currentTarget","useEffect","scrollElement","current","addEventListener","removeEventListener","handleVirtualizedVerticalScroll","_ref4","scrollDirection","scrollOffset","scrollUpdateWasRequested","itemRenderer","_ref5","index","createElement","memoizedInnerElementType","useMemo","children","rest","undefined","cx","styles","tableBody","withHeader","getTestId","ComponentDefaultTestId","TABLE_VIRTUALIZED_BODY","TableBody","_defineProperty","length","AutoSizer","_ref6","List","tableBodyItems","itemSize","RowHeights","height","itemCount","width","outerRef","innerElementType"],"mappings":"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"}