{"version":3,"sources":["../node_modules/.pnpm/@storybook+manager-api@9.0.0-alpha.1_storybook@9.2.0-alpha.1_@testing-library+dom@10.4._c4252e78d7b117f2c09586ba23bbaaa7/node_modules/@storybook/manager-api/shim.mjs","../src/constants.ts","../src/components/Badge.tsx","../node_modules/.pnpm/@storybook+components@9.0.0-alpha.1_storybook@9.2.0-alpha.1_@testing-library+dom@10.4.0_87b6eb120f7660d61667547ecb5411ea/node_modules/@storybook/components/shim.mjs","../src/utils/tag.ts","../src/useBadgesToDisplay.ts","../src/utils/display.ts","../src/components/Tool.tsx","../src/defaultConfig.ts","../src/components/Sidebar.tsx","../src/renderLabel.tsx","../src/manager.tsx"],"names":["shim_exports","__reExport","manager_api_star","ADDON_ID","TOOL_ID","KEY","components_star","getTagParts","tag","prefix","rest","getTagPrefix","getTagSuffix","normalisePattern","pattern","patternWithBoundaries","matchTag","patterns","normalisedPatterns","suffix","prefixPattern","suffixPattern","matchesPrefix","matchesSuffix","matchTags","tags","config","WithTooltipPatched","styled","BadgeUI","as","context","extraStyle","hasLongText","theme","TooltipUI","Badge","style","text","tooltip","useTheme","React","Fragment","getBadgeProps","entry","WithBadge","restProps","cfg","DISPLAY_DEFAULTS","toArray","value","normaliseDisplay","display","shouldDisplay","type","condition","_useBadgesToDisplay","api","parameters","parent","parentTags","resolvedParent","displayOutcome","acc","current","useBadgesToDisplay","useStorybookApi","useMemo","Separator","Root","Tool","addons","storyData","badgesToDisplay","badge","newBadge","preReleaseBadge","str","deprecatedBadge","outdatedBadge","dangerBadge","codeOnlyBadge","versionBadge","version","isExperimental","defaultConfig","Container","hasParentPadding","hasStatusWithUI","Spacer","Sidebar","children","item","itemStatuses","renderLabel","experimental_useStatusStore","all"],"mappings":"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","file":"manager.js","sourcesContent":["export * from 'storybook/internal/manager-api';\n","export const ADDON_ID = 'storybook/addon-tag-badges'\nexport const TOOL_ID = `${ADDON_ID}/tool`\nexport const KEY = `tagBadges`\n","import React, { Fragment } from 'react'\nimport type { HashEntry } from 'storybook/manager-api'\nimport { WithTooltip, TooltipMessage } from '@storybook/components'\nimport { CSSObject, styled, useTheme } from 'storybook/theming'\n\nimport type { Badge as BadgeConfigType, BadgeOrBadgeFn } from '../types/Badge'\nimport { getTagParts, getTagPrefix, getTagSuffix } from '../utils/tag'\n\ninterface BadgeProps extends BadgeConfigType {\n  context: 'mdx' | 'sidebar' | 'toolbar'\n}\n\ninterface WithBadgeProps {\n  config: BadgeOrBadgeFn\n  entry: HashEntry | undefined\n  tag: string\n  context: 'mdx' | 'sidebar' | 'toolbar'\n}\n\nconst WithTooltipPatched = styled(WithTooltip)`\n  line-height: 1px;\n`\n\nconst BadgeUI = styled.div<\n  Pick<BadgeProps, 'context'> & { extraStyle: CSSObject; hasLongText: boolean }\n>(({ as, context, extraStyle, hasLongText, theme }) => ({\n  display: 'inline-block',\n  fontSize: 11,\n  lineHeight: '.75rem',\n  alignSelf: 'center',\n  padding: context === 'sidebar' ? '3px 8px' : '4px 12px',\n  border: 'none',\n  cursor:\n    as === 'button' ? 'help' : context === 'sidebar' ? 'cursor' : 'initial',\n  borderRadius: '3em',\n  fontWeight: theme.typography.weight.bold,\n  boxShadow:\n    theme.base === 'light'\n      ? `inset 0 0 0 1px ${extraStyle.borderColor ?? `color-mix(in oklab, ${extraStyle.color ?? theme.color.dark} 10%, transparent 90%)`}`\n      : `inset 0 0 0 1px ${extraStyle.borderColor ?? 'none'}`,\n  backgroundColor: theme.color.mediumlight,\n  color: theme.color.dark,\n  wordBreak: 'normal',\n  width: hasLongText ? 'min-content' : 'fit-content',\n  flexShrink: 0,\n  textWrapStyle: 'pretty',\n  textAlign: 'center',\n  ...extraStyle,\n  borderColor: undefined,\n}))\n\nconst TooltipUI = styled.div(({ theme }) => ({\n  padding: '8px 12px',\n  boxSizing: 'border-box',\n  color: theme.color.defaultText,\n  lineHeight: '1.125rem',\n}))\n\nexport const Badge: React.FC<BadgeProps> = ({\n  context,\n  style,\n  text,\n  tooltip,\n}) => {\n  const theme = useTheme()\n\n  let extraStyle\n  if (style === 'green') {\n    extraStyle = {\n      backgroundColor: 'hsl(130, 100%, 74%)',\n      borderColor: 'hsl(130, 100%, 34%)',\n      color: 'hsl(130, 100%, 6%)',\n    }\n  } else if (style === 'purple') {\n    extraStyle = {\n      backgroundColor: 'hsl(257, 100%, 84%)',\n      borderColor: 'hsl(257, 100%, 64%)',\n      color: 'hsl(257, 100%, 12%)',\n    }\n  } else if (style === 'blue') {\n    extraStyle = {\n      backgroundColor: 'hsl(194, 100%, 74%)',\n      borderColor: 'hsl(194, 100%, 34%)',\n      color: 'hsl(194, 100%, 12%)',\n    }\n  } else if (style === 'grey') {\n    extraStyle = {\n      backgroundColor: 'hsl(0, 0%, 84%)',\n      borderColor: 'hsl(0, 0%, 34%)',\n      color: 'hsl(0, 0%, 12%)',\n    }\n  } else if (style === 'orange') {\n    extraStyle = {\n      backgroundColor: 'hsl(16, 100%, 74%)',\n      borderColor: 'hsl(16, 100%, 34%)',\n      color: 'hsl(16, 100%, 12%)',\n    }\n  } else if (style === 'red') {\n    extraStyle = {\n      backgroundColor: 'hsl(0, 100%, 44%)',\n      borderColor: 'hsl(0, 100%, 64%)',\n      color: 'hsl(0, 100%, 94%)',\n    }\n  } else if (style === 'yellow') {\n    extraStyle = {\n      backgroundColor: 'hsl(36, 100%, 74%)',\n      borderColor: 'hsl(36, 100%, 34%)',\n      color: 'hsl(36, 100%, 12%)',\n    }\n  } else if (style === 'pink') {\n    extraStyle = {\n      backgroundColor: 'hsl(330, 100%, 74%)',\n      borderColor: 'hsl(330, 100%, 34%)',\n      color: 'hsl(330, 100%, 12%)',\n    }\n  } else if (style === 'turquoise') {\n    extraStyle = {\n      backgroundColor: 'hsl(157, 100%, 74%)',\n      borderColor: 'hsl(157, 100%, 34%)',\n      color: 'hsl(157, 100%, 12%)',\n    }\n  } else if (typeof style === 'object') {\n    extraStyle = {\n      ...style,\n    }\n  }\n\n  if (typeof text !== 'string') {\n    throw new Error(\n      'Badge: the text prop must be defined and must be a string.',\n    )\n  }\n\n  const hasLongText = text.length > 15\n\n  return (\n    <Fragment>\n      {!tooltip || context == 'sidebar' ? (\n        <BadgeUI\n          context={context}\n          extraStyle={extraStyle ?? {}}\n          hasLongText={hasLongText}\n          theme={theme}\n        >\n          {text}\n        </BadgeUI>\n      ) : (\n        <WithTooltipPatched\n          closeOnOutsideClick\n          placement={'bottom'}\n          tooltip={\n            typeof tooltip === 'string' ? (\n              <TooltipUI>{tooltip}</TooltipUI>\n            ) : (\n              <TooltipMessage {...tooltip} />\n            )\n          }\n        >\n          <BadgeUI\n            as=\"button\"\n            context={context}\n            extraStyle={extraStyle ?? {}}\n            hasLongText={hasLongText}\n            theme={theme}\n          >\n            {text}\n          </BadgeUI>\n        </WithTooltipPatched>\n      )}\n    </Fragment>\n  )\n}\n\nexport function getBadgeProps(\n  config: BadgeOrBadgeFn,\n  entry: HashEntry | undefined,\n  tag: string,\n  context: 'mdx' | 'sidebar' | 'toolbar',\n): Omit<BadgeProps, 'context'> {\n  const props =\n    typeof config === 'function'\n      ? config({ context, entry, getTagParts, getTagPrefix, getTagSuffix, tag })\n      : config\n\n  return props\n}\n\nexport const WithBadge: React.FC<WithBadgeProps> = ({\n  context,\n  config,\n  entry,\n  tag,\n  ...restProps\n}) => {\n  const cfg = getBadgeProps(config, entry, tag, context)\n\n  return <Badge {...cfg} context={context} {...restProps} />\n}\n","export * from 'storybook/internal/components';\n","import type { TagPatterns } from '../types/TagPattern'\n\n/**\n * Splits a tag into a prefix and suffix, separated by a colon.\n * If no colons are present, `suffix` is `null`. If more than one\n * colons are present, `suffix` is a concatenation of all the parts\n * beyond the first one.\n * @param tag The tag being queried.\n * @returns The prefix and suffix.\n */\nexport function getTagParts(tag: string): {\n  prefix: string\n  suffix: string | null\n} {\n  const [prefix, ...rest] = tag.split(':')\n  return { prefix, suffix: rest.join(':') || null }\n}\n\n/**\n * Gets the prefix of a tag, i.e. the part before the\n * colon if it contains one, or the whole tag otherwise.\n * @param tag The tag being queried.\n * @returns The prefix or the whole tag.\n */\nexport function getTagPrefix(tag: string): string {\n  return getTagParts(tag).prefix\n}\n\n/**\n * Gets the suffix of a tag, i.e. the part after the\n * colon if it contains one, or `null` otherwise.\n * @param tag The tag being queried.\n * @returns The suffix if it exists.\n */\nexport function getTagSuffix(tag: string): string | null {\n  return getTagParts(tag).suffix\n}\n\nfunction normalisePattern(\n  pattern: string | RegExp | undefined,\n): string | RegExp {\n  if (pattern === undefined) {\n    return /.*/\n  }\n\n  if (typeof pattern === 'string') {\n    let patternWithBoundaries = pattern\n    if (!patternWithBoundaries.startsWith('^')) {\n      patternWithBoundaries = `^${patternWithBoundaries}`\n    }\n    if (!patternWithBoundaries.endsWith('$')) {\n      patternWithBoundaries += '$'\n    }\n\n    return new RegExp(patternWithBoundaries)\n  }\n\n  return pattern\n}\n\n/**\n * Checks if a given tag matches any of the provided patterns.\n * Patterns can be regular expressions, strings, or objects with prefix and suffix patterns.\n * @param tag The tag to match against the patterns.\n * @param patterns The pattern or patterns to match the tag against.\n * @returns `true` if the tag matches any of the patterns, `false` otherwise.\n */\nexport function matchTag(tag: string, patterns: TagPatterns): boolean {\n  const normalisedPatterns = [patterns].flat()\n  for (const pattern of normalisedPatterns) {\n    if (pattern instanceof RegExp) {\n      if (tag.match(pattern)) {\n        return true\n      }\n    } else if (typeof pattern === 'string') {\n      if (tag === pattern) {\n        return true\n      }\n    } else {\n      const { prefix, suffix } = getTagParts(tag)\n      const prefixPattern = normalisePattern(pattern.prefix)\n      const suffixPattern = normalisePattern(pattern.suffix)\n\n      const matchesPrefix = prefix.match(prefixPattern)\n      const matchesSuffix = suffix && suffix.match(suffixPattern)\n\n      if (matchesPrefix && matchesSuffix) {\n        return true\n      }\n    }\n  }\n\n  return false\n}\n\n/**\n * Filters an array of tags based on the provided pattern configuration.\n * @param tags An array of tags to filter.\n * @param config The pattern configuration to match tags against.\n * @returns An array of tags that match the given pattern configuration.\n */\nexport function matchTags(tags: string[], config: TagPatterns): string[] {\n  return tags.filter((tag) => matchTag(tag, config))\n}\n","import { useMemo } from 'react'\nimport { type API, useStorybookApi } from 'storybook/manager-api'\n\nimport { DisplayOutcome, shouldDisplay } from './utils/display'\nimport { matchTags } from './utils/tag'\nimport type {\n  API_ComponentEntry,\n  API_GroupEntry,\n  API_HashEntry,\n  API_LeafEntry,\n} from '@storybook/types'\nimport { TagBadgeParameters } from './types/TagBadgeParameters'\nimport { BadgeOrBadgeFn } from './types/Badge'\n\ninterface UseBadgesToDisplayOptions {\n  context: 'mdx' | 'sidebar' | 'toolbar'\n  parameters: TagBadgeParameters\n  parent?: string\n  tags: string[]\n  type:\n    | API_ComponentEntry['type']\n    | API_GroupEntry['type']\n    | API_LeafEntry['type']\n}\n\ntype BadgesToDisplay = { badge: BadgeOrBadgeFn; tag: string }[]\n\nfunction _useBadgesToDisplay({\n  api,\n  context,\n  parameters,\n  parent,\n  tags,\n  type,\n}: UseBadgesToDisplayOptions & {\n  api?: API\n}): BadgesToDisplay {\n  /* Handle potentially missing data from callees. */\n  if (!tags || !type) {\n    return []\n  }\n\n  let parentTags: string[] | undefined\n  let resolvedParent: API_HashEntry | undefined\n  if (api && parent) {\n    resolvedParent = api.resolveStory(parent)\n    if (resolvedParent && resolvedParent.type !== 'root') {\n      parentTags = resolvedParent.tags\n    }\n  }\n\n  return (parameters || [])\n    .map((config) => ({\n      ...config,\n      displayOutcome: shouldDisplay({ context, config, type }),\n    }))\n    .filter(({ displayOutcome }) => displayOutcome !== DisplayOutcome.NEVER)\n    .flatMap((config) =>\n      matchTags(tags, config.tags).map((tag) => ({\n        badge: config.badge,\n        displayOutcome: config.displayOutcome,\n        tag,\n      })),\n    )\n    .reduce((acc: BadgesToDisplay, current) => {\n      if (\n        current.displayOutcome === DisplayOutcome.SKIP_INHERITED &&\n        resolvedParent &&\n        resolvedParent.type !== 'root' &&\n        parentTags?.includes(current.tag)\n      ) {\n        const displayParent = _useBadgesToDisplay({\n          api,\n          context,\n          parameters,\n          parent: resolvedParent.parent,\n          tags: parentTags,\n          type: resolvedParent.type,\n        })\n\n        if (displayParent.find(({ tag }) => tag === current.tag)) {\n          return acc\n        }\n      }\n\n      if (acc.every(({ tag }) => tag !== current.tag)) {\n        acc.push(current)\n      }\n      return acc\n    }, [])\n}\n\nexport function useBadgesToDisplay({\n  context,\n  parameters,\n  parent,\n  tags,\n  type,\n}: UseBadgesToDisplayOptions): BadgesToDisplay {\n  const api = useStorybookApi()\n\n  return useMemo(\n    () =>\n      _useBadgesToDisplay({\n        api,\n        context,\n        parameters,\n        parent,\n        tags,\n        type,\n      }),\n    [context, parameters, parent, tags, type],\n  )\n}\n","import { HashEntry } from 'storybook/manager-api'\nimport type { ArrayElement } from '../types/ArrayElement'\nimport type { TagBadgeParameters } from '../types/TagBadgeParameters'\nimport type {\n  Display,\n  NormalisedDisplay,\n  MDXDisplayOptionItem,\n  SidebarDisplayOptionItem,\n  ToolbarDisplayOptionItem,\n} from '../types/DisplayOptions'\n\nexport interface ShouldDisplayOptions {\n  config: Partial<ArrayElement<TagBadgeParameters>>\n  context: 'mdx' | 'sidebar' | 'toolbar'\n  type: HashEntry['type']\n}\n\nexport const DISPLAY_DEFAULTS = {\n  mdx: ['story', 'component'],\n  sidebar: [\n    { type: 'story', skipInherited: true },\n    { type: 'docs', skipInherited: true },\n    { type: 'component', skipInherited: false },\n    { type: 'group', skipInherited: false },\n  ],\n  toolbar: ['docs', 'story'],\n} satisfies NormalisedDisplay\n\nfunction toArray<T>(value: T | T[]): T[] {\n  return Array.isArray(value) ? value : [value]\n}\n\nexport function normaliseDisplay(display?: Display): {\n  mdx: MDXDisplayOptionItem[]\n  sidebar: SidebarDisplayOptionItem[]\n  toolbar: ToolbarDisplayOptionItem[]\n} {\n  return {\n    mdx: toArray(display?.mdx ?? DISPLAY_DEFAULTS.mdx),\n    sidebar: toArray(display?.sidebar ?? DISPLAY_DEFAULTS.sidebar),\n    toolbar: toArray(display?.toolbar ?? DISPLAY_DEFAULTS.toolbar),\n  }\n}\n\nexport enum DisplayOutcome {\n  NEVER = 'never',\n  SKIP_INHERITED = 'skip-inherited',\n  ALWAYS = 'always',\n}\n\n/**\n * Determines whether a badge should be displayed based on the provided config\n * and based on the display context (toolbar, sidebar).\n *\n * @param options The options to determine display.\n * @param options.config The configuration for the badge.\n * @param options.context The context where the badge might be displayed.\n * @param options.type The type of the current entry.\n *\n * @returns {DisplayOutcome} `ALWAYS` if the badge should be displayed, `NEVER` if\n * it shouldn't, and `SKIP_INHERITED` if it should only when the parent entry doesn't\n * show a badge for the same tag already.\n */\nexport function shouldDisplay({\n  config,\n  context,\n  type,\n}: ShouldDisplayOptions): DisplayOutcome {\n  if (type === 'root') {\n    return DisplayOutcome.NEVER\n  }\n\n  for (const condition of normaliseDisplay(config.display)[context]) {\n    // If options contain the value `true`, we must show badges for all types.\n    if (condition === true) {\n      return DisplayOutcome.ALWAYS\n    }\n\n    // Inversely, if `false` is found, we must never display badges.\n    if (condition === false) {\n      return DisplayOutcome.NEVER\n    }\n\n    // For MDX and toolbar badges, we may have strings that match a content type.\n    // If a condition matches the type in parameters, we know we can show the badge.\n    // NOTE: we don't actually check for context here to account for users who don't\n    // use TypeScript and mistakenly pass strings to the 'sidebar' context options.\n    if (condition === type) {\n      // If the type is found, we must show badges for this type.\n      return DisplayOutcome.ALWAYS\n    }\n\n    // For sidebar badges, we must account for the `skipInherited` property.\n    if (context === 'sidebar' && typeof condition === 'object') {\n      // When a type is defined, it must always match the type of the HashEntry.\n      // If it doesn't, we don't return true yet.\n      if (condition.type === type) {\n        return condition.skipInherited\n          ? DisplayOutcome.SKIP_INHERITED\n          : DisplayOutcome.ALWAYS\n      }\n    }\n  }\n\n  return DisplayOutcome.NEVER\n}\n","import React, { type FC } from 'react'\nimport { addons, type API } from 'storybook/manager-api'\nimport { styled } from 'storybook/theming'\n\nimport { KEY, TOOL_ID } from '../constants'\nimport { type TagBadgeParameters } from '../types/TagBadgeParameters'\nimport { WithBadge } from './Badge'\nimport { useBadgesToDisplay } from '../useBadgesToDisplay'\ninterface ToolProps {\n  api: API\n}\n\nconst Separator = styled.div`\n  content: ' ';\n  width: 1px;\n  height: 20px;\n  background: rgba(255, 255, 255, 0.1);\n  margin-left: 2px;\n  margin-right: 2px;\n  display: inline-block;\n`\n\nconst Root = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 6px;\n\n  &:last-child div:last-child {\n    display: none;\n  }\n`\n\nexport const Tool: FC<ToolProps> = function Tool({ api }) {\n  const { [KEY]: parameters } = addons.getConfig() as {\n    [KEY]: TagBadgeParameters\n  }\n  const storyData = api.getCurrentStoryData()\n  const { tags, type } = storyData ?? {}\n\n  const badgesToDisplay = useBadgesToDisplay({\n    context: 'toolbar',\n    parameters,\n    tags,\n    type,\n  })\n\n  return badgesToDisplay.length ? (\n    <Root key={TOOL_ID}>\n      {badgesToDisplay.map(({ badge, tag }) => (\n        <WithBadge\n          config={badge}\n          context=\"toolbar\"\n          entry={storyData}\n          key={tag}\n          tag={tag}\n        />\n      ))}\n      <Separator />\n    </Root>\n  ) : (\n    ''\n  )\n}\n","import type {\n  TagBadgeParameter,\n  TagBadgeParameters,\n} from './types/TagBadgeParameters'\n\nexport const newBadge: TagBadgeParameter = {\n  tags: 'new',\n  badge: {\n    text: 'New',\n    style: 'green',\n  },\n}\n\nexport const preReleaseBadge: TagBadgeParameter = {\n  tags: ['alpha', 'beta', 'rc', 'experimental'],\n  badge: ({ tag }) => {\n    const upperFirst = (str: string): string =>\n      str[0].toUpperCase() + str.slice(1)\n\n    return {\n      text: tag === 'rc' ? 'Release candidate' : upperFirst(tag),\n      style: 'purple',\n    }\n  },\n}\n\nexport const deprecatedBadge: TagBadgeParameter = {\n  tags: 'deprecated',\n  badge: {\n    text: 'Deprecated',\n    style: 'yellow',\n  },\n}\n\nexport const outdatedBadge: TagBadgeParameter = {\n  tags: 'outdated',\n  badge: {\n    text: 'Outdated',\n    style: 'orange',\n  },\n}\n\nexport const dangerBadge: TagBadgeParameter = {\n  tags: 'danger',\n  badge: {\n    text: 'Danger',\n    style: 'red',\n  },\n}\n\nexport const codeOnlyBadge: TagBadgeParameter = {\n  tags: ['code-only'],\n  badge: {\n    text: 'Code Only',\n    style: 'grey',\n  },\n}\n\nexport const versionBadge: TagBadgeParameter = {\n  tags: [\n    {\n      prefix: 'v',\n    },\n    {\n      prefix: 'version',\n    },\n  ],\n  badge: ({ getTagSuffix, tag }) => {\n    const version = getTagSuffix(tag)\n    const isExperimental = version?.startsWith('0')\n\n    return {\n      text: `${version}`,\n      style: isExperimental ? 'turquoise' : 'blue',\n    }\n  },\n}\n\nexport const defaultConfig: TagBadgeParameters = [\n  newBadge,\n  preReleaseBadge,\n  deprecatedBadge,\n  outdatedBadge,\n  dangerBadge,\n  codeOnlyBadge,\n  versionBadge,\n]\n","import React, { type FC, type ReactNode } from 'react'\nimport { addons } from 'storybook/manager-api'\nimport type { API_HashEntry } from '@storybook/types'\nimport { styled } from 'storybook/theming'\n\nimport { KEY } from '../constants'\nimport { TagBadgeParameters } from '../types/TagBadgeParameters'\nimport { useBadgesToDisplay } from '../useBadgesToDisplay'\nimport { WithBadge } from './Badge'\n\ninterface SidebarProps {\n  children: ReactNode\n  item: API_HashEntry\n  hasStatusWithUI?: boolean\n}\n\nconst Container = styled.div<{\n  hasParentPadding: boolean\n  hasStatusWithUI: boolean\n}>(\n  ({ hasParentPadding, hasStatusWithUI }) => `\n  display: flex;\n  flex: 1;\n  justify-content: flex-end;\n  flex-wrap: wrap;\n  text-wrap-style: balance;\n  gap: 4px;\n  margin-right: ${hasStatusWithUI ? '6px' : hasParentPadding ? '28px' : '34px'};\n}\n`,\n)\n\nconst Spacer = styled.div`\n  flex: 1;\n}\n`\n\nexport const Sidebar: FC<SidebarProps> = ({\n  children,\n  item,\n  hasStatusWithUI,\n}) => {\n  const { [KEY]: parameters } = addons.getConfig() as {\n    [KEY]: TagBadgeParameters\n  }\n\n  if (\n    item.type !== 'component' &&\n    item.type !== 'group' &&\n    item.type !== 'docs' &&\n    item.type !== 'story'\n  ) {\n    return children\n  }\n\n  const badgesToDisplay = useBadgesToDisplay({\n    context: 'sidebar',\n    parameters,\n    parent: item.parent,\n    tags: item.tags,\n    type: item.type,\n  })\n\n  return (\n    <Container\n      hasParentPadding={item.type === 'component' || item.type === 'group'}\n      hasStatusWithUI={hasStatusWithUI ?? false}\n    >\n      {children}\n      <Spacer />\n      {badgesToDisplay.length ? (\n        <WithBadge\n          config={badgesToDisplay[0].badge}\n          context=\"sidebar\"\n          entry={item}\n          tag={badgesToDisplay[0].tag}\n        />\n      ) : (\n        ''\n      )}\n    </Container>\n  )\n}\n","import React from 'react'\nimport { API_HashEntry, type StatusByTypeId } from '@storybook/types'\nimport { experimental_useStatusStore } from 'storybook/manager-api'\n\nimport { Sidebar } from './components/Sidebar'\n\nfunction hasStatusWithUI(itemStatuses: StatusByTypeId): boolean {\n  if (!itemStatuses) {\n    return false\n  }\n\n  if (itemStatuses['storybook/component-test']) {\n    return true\n  }\n\n  // Add future statuses with a UI element here.\n\n  return false\n}\n\nexport function renderLabel(item: API_HashEntry) {\n  if (\n    item.type !== 'story' &&\n    item.type !== 'group' &&\n    item.type !== 'docs' &&\n    item.type !== 'component'\n  ) {\n    return\n  }\n\n  const itemStatuses = experimental_useStatusStore((all) => all[item.id])\n\n  return (\n    <Sidebar item={item} hasStatusWithUI={hasStatusWithUI(itemStatuses)}>\n      {item.name}\n    </Sidebar>\n  )\n}\n","import React from 'react'\nimport { addons, types } from '@storybook/manager-api'\n\nimport { Tool } from './components/Tool'\nimport { ADDON_ID, KEY, TOOL_ID } from './constants'\nimport { defaultConfig } from './defaultConfig'\nimport { renderLabel } from './renderLabel'\n\naddons.register(ADDON_ID, (api) => {\n  addons.add(TOOL_ID, {\n    type: types.TOOL,\n    title: 'Tag Badges',\n    render: () => <Tool api={api} />,\n  })\n})\n\naddons.setConfig({\n  [KEY]: defaultConfig,\n  sidebar: { renderLabel },\n})\n"]}