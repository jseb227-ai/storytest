try{
(() => {
  var __defProp = Object.defineProperty;
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: !0 });
  };

  // global-externals:react
  var react_default = __REACT__, { Children, Component, Fragment, Profiler, PureComponent, StrictMode, Suspense, __SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, act, cloneElement, createContext, createElement, createFactory, createRef, forwardRef, isValidElement, lazy, memo, startTransition, unstable_act, useCallback, useContext, useDebugValue, useDeferredValue, useEffect, useId, useImperativeHandle, useInsertionEffect, useLayoutEffect, useMemo, useReducer, useRef, useState, useSyncExternalStore, useTransition, version } = __REACT__;

  // global-externals:storybook/internal/manager-api
  var manager_api_exports = {};
  __export(manager_api_exports, {
    ActiveTabs: () => ActiveTabs,
    Consumer: () => Consumer,
    ManagerContext: () => ManagerContext,
    Provider: () => Provider,
    RequestResponseError: () => RequestResponseError,
    addons: () => addons,
    combineParameters: () => combineParameters,
    controlOrMetaKey: () => controlOrMetaKey,
    controlOrMetaSymbol: () => controlOrMetaSymbol,
    default: () => manager_api_default,
    eventMatchesShortcut: () => eventMatchesShortcut,
    eventToShortcut: () => eventToShortcut,
    experimental_MockUniversalStore: () => experimental_MockUniversalStore,
    experimental_UniversalStore: () => experimental_UniversalStore,
    experimental_getStatusStore: () => experimental_getStatusStore,
    experimental_getTestProviderStore: () => experimental_getTestProviderStore,
    experimental_requestResponse: () => experimental_requestResponse,
    experimental_useStatusStore: () => experimental_useStatusStore,
    experimental_useTestProviderStore: () => experimental_useTestProviderStore,
    experimental_useUniversalStore: () => experimental_useUniversalStore,
    internal_fullStatusStore: () => internal_fullStatusStore,
    internal_fullTestProviderStore: () => internal_fullTestProviderStore,
    internal_universalStatusStore: () => internal_universalStatusStore,
    internal_universalTestProviderStore: () => internal_universalTestProviderStore,
    isMacLike: () => isMacLike,
    isShortcutTaken: () => isShortcutTaken,
    keyToSymbol: () => keyToSymbol,
    merge: () => merge,
    mockChannel: () => mockChannel,
    optionOrAltSymbol: () => optionOrAltSymbol,
    shortcutMatchesShortcut: () => shortcutMatchesShortcut,
    shortcutToHumanString: () => shortcutToHumanString,
    types: () => types,
    useAddonState: () => useAddonState,
    useArgTypes: () => useArgTypes,
    useArgs: () => useArgs,
    useChannel: () => useChannel,
    useGlobalTypes: () => useGlobalTypes,
    useGlobals: () => useGlobals,
    useParameter: () => useParameter,
    useSharedState: () => useSharedState,
    useStoryPrepared: () => useStoryPrepared,
    useStorybookApi: () => useStorybookApi,
    useStorybookState: () => useStorybookState
  });
  var manager_api_default = __STORYBOOK_API__, { ActiveTabs, Consumer, ManagerContext, Provider, RequestResponseError, addons, combineParameters, controlOrMetaKey, controlOrMetaSymbol, eventMatchesShortcut, eventToShortcut, experimental_MockUniversalStore, experimental_UniversalStore, experimental_getStatusStore, experimental_getTestProviderStore, experimental_requestResponse, experimental_useStatusStore, experimental_useTestProviderStore, experimental_useUniversalStore, internal_fullStatusStore, internal_fullTestProviderStore, internal_universalStatusStore, internal_universalTestProviderStore, isMacLike, isShortcutTaken, keyToSymbol, merge, mockChannel, optionOrAltSymbol, shortcutMatchesShortcut, shortcutToHumanString, types, useAddonState, useArgTypes, useArgs, useChannel, useGlobalTypes, useGlobals, useParameter, useSharedState, useStoryPrepared, useStorybookApi, useStorybookState } = __STORYBOOK_API__;

  // global-externals:storybook/manager-api
  var manager_api_default2 = __STORYBOOK_API__, { ActiveTabs: ActiveTabs2, Consumer: Consumer2, ManagerContext: ManagerContext2, Provider: Provider2, RequestResponseError: RequestResponseError2, addons: addons2, combineParameters: combineParameters2, controlOrMetaKey: controlOrMetaKey2, controlOrMetaSymbol: controlOrMetaSymbol2, eventMatchesShortcut: eventMatchesShortcut2, eventToShortcut: eventToShortcut2, experimental_MockUniversalStore: experimental_MockUniversalStore2, experimental_UniversalStore: experimental_UniversalStore2, experimental_getStatusStore: experimental_getStatusStore2, experimental_getTestProviderStore: experimental_getTestProviderStore2, experimental_requestResponse: experimental_requestResponse2, experimental_useStatusStore: experimental_useStatusStore2, experimental_useTestProviderStore: experimental_useTestProviderStore2, experimental_useUniversalStore: experimental_useUniversalStore2, internal_fullStatusStore: internal_fullStatusStore2, internal_fullTestProviderStore: internal_fullTestProviderStore2, internal_universalStatusStore: internal_universalStatusStore2, internal_universalTestProviderStore: internal_universalTestProviderStore2, isMacLike: isMacLike2, isShortcutTaken: isShortcutTaken2, keyToSymbol: keyToSymbol2, merge: merge2, mockChannel: mockChannel2, optionOrAltSymbol: optionOrAltSymbol2, shortcutMatchesShortcut: shortcutMatchesShortcut2, shortcutToHumanString: shortcutToHumanString2, types: types2, useAddonState: useAddonState2, useArgTypes: useArgTypes2, useArgs: useArgs2, useChannel: useChannel2, useGlobalTypes: useGlobalTypes2, useGlobals: useGlobals2, useParameter: useParameter2, useSharedState: useSharedState2, useStoryPrepared: useStoryPrepared2, useStorybookApi: useStorybookApi2, useStorybookState: useStorybookState2 } = __STORYBOOK_API__;

  // global-externals:storybook/theming
  var theming_default = __STORYBOOK_THEMING__, { CacheProvider, ClassNames, Global, ThemeProvider, background, color, convert, create, createCache, createGlobal, createReset, css, darken, ensure, ignoreSsrWarning, isPropValid, jsx, keyframes, lighten, styled, themes, typography, useTheme, withTheme } = __STORYBOOK_THEMING__;

  // global-externals:storybook/internal/components
  var components_exports = {};
  __export(components_exports, {
    A: () => A,
    ActionBar: () => ActionBar,
    AddonPanel: () => AddonPanel,
    Badge: () => Badge,
    Bar: () => Bar,
    Blockquote: () => Blockquote,
    Button: () => Button,
    ClipboardCode: () => ClipboardCode,
    Code: () => Code,
    DL: () => DL,
    Div: () => Div,
    DocumentWrapper: () => DocumentWrapper,
    EmptyTabContent: () => EmptyTabContent,
    ErrorFormatter: () => ErrorFormatter,
    FlexBar: () => FlexBar,
    Form: () => Form,
    H1: () => H1,
    H2: () => H2,
    H3: () => H3,
    H4: () => H4,
    H5: () => H5,
    H6: () => H6,
    HR: () => HR,
    IconButton: () => IconButton,
    Img: () => Img,
    LI: () => LI,
    Link: () => Link,
    ListItem: () => ListItem,
    Loader: () => Loader,
    Modal: () => Modal,
    OL: () => OL,
    P: () => P,
    Placeholder: () => Placeholder,
    Pre: () => Pre,
    ProgressSpinner: () => ProgressSpinner,
    ResetWrapper: () => ResetWrapper,
    ScrollArea: () => ScrollArea,
    Separator: () => Separator,
    Spaced: () => Spaced,
    Span: () => Span,
    StorybookIcon: () => StorybookIcon,
    StorybookLogo: () => StorybookLogo,
    SyntaxHighlighter: () => SyntaxHighlighter,
    TT: () => TT,
    TabBar: () => TabBar,
    TabButton: () => TabButton,
    TabWrapper: () => TabWrapper,
    Table: () => Table,
    Tabs: () => Tabs,
    TabsState: () => TabsState,
    TooltipLinkList: () => TooltipLinkList,
    TooltipMessage: () => TooltipMessage,
    TooltipNote: () => TooltipNote,
    UL: () => UL,
    WithTooltip: () => WithTooltip,
    WithTooltipPure: () => WithTooltipPure,
    Zoom: () => Zoom,
    codeCommon: () => codeCommon,
    components: () => components,
    createCopyToClipboardFunction: () => createCopyToClipboardFunction,
    default: () => components_default,
    getStoryHref: () => getStoryHref,
    interleaveSeparators: () => interleaveSeparators,
    nameSpaceClassNames: () => nameSpaceClassNames,
    resetComponents: () => resetComponents,
    withReset: () => withReset
  });
  var components_default = __STORYBOOK_COMPONENTS__, { A, ActionBar, AddonPanel, Badge, Bar, Blockquote, Button, ClipboardCode, Code, DL, Div, DocumentWrapper, EmptyTabContent, ErrorFormatter, FlexBar, Form, H1, H2, H3, H4, H5, H6, HR, IconButton, Img, LI, Link, ListItem, Loader, Modal, OL, P, Placeholder, Pre, ProgressSpinner, ResetWrapper, ScrollArea, Separator, Spaced, Span, StorybookIcon, StorybookLogo, SyntaxHighlighter, TT, TabBar, TabButton, TabWrapper, Table, Tabs, TabsState, TooltipLinkList, TooltipMessage, TooltipNote, UL, WithTooltip, WithTooltipPure, Zoom, codeCommon, components, createCopyToClipboardFunction, getStoryHref, interleaveSeparators, nameSpaceClassNames, resetComponents, withReset } = __STORYBOOK_COMPONENTS__;

  // node_modules/storybook-addon-tag-badges/dist/manager.js
  var Y = Object.defineProperty, K = Object.getOwnPropertyDescriptor, $ = Object.getOwnPropertyNames, j = Object.prototype.hasOwnProperty, S = (e, t, r, o) => {
    if (t && typeof t == "object" || typeof t == "function") for (let a of $(t)) !j.call(e, a) && a !== r && Y(e, a, { get: () => t[a], enumerable: !(o = K(t, a)) || o.enumerable });
    return e;
  }, c = (e, t, r) => (S(e, t, "default"), r), d = {};
  c(d, manager_api_exports);
  var h = "storybook/addon-tag-badges", u = `${h}/tool`, m = "tagBadges", g = {};
  c(g, components_exports);
  function y(e) {
    let [t, ...r] = e.split(":");
    return { prefix: t, suffix: r.join(":") || null };
  }
  function O(e) {
    return y(e).prefix;
  }
  function A2(e) {
    return y(e).suffix;
  }
  function C(e) {
    if (e === void 0) return /.*/;
    if (typeof e == "string") {
      let t = e;
      return t.startsWith("^") || (t = `^${t}`), t.endsWith("$") || (t += "$"), new RegExp(t);
    }
    return e;
  }
  function M(e, t) {
    let r = [t].flat();
    for (let o of r) if (o instanceof RegExp) {
      if (e.match(o)) return !0;
    } else if (typeof o == "string") {
      if (e === o) return !0;
    } else {
      let { prefix: a, suffix: s } = y(e), p = C(o.prefix), i = C(o.suffix), n = a.match(p), l = s && s.match(i);
      if (n && l) return !0;
    }
    return !1;
  }
  function k(e, t) {
    return e.filter((r) => M(r, t));
  }
  var z = styled(g.WithTooltip)`
  line-height: 1px;
`, W = styled.div(({ as: e, context: t, extraStyle: r, hasLongText: o, theme: a }) => ({ display: "inline-block", fontSize: 11, lineHeight: ".75rem", alignSelf: "center", padding: t === "sidebar" ? "3px 8px" : "4px 12px", border: "none", cursor: e === "button" ? "help" : t === "sidebar" ? "cursor" : "initial", borderRadius: "3em", fontWeight: a.typography.weight.bold, boxShadow: a.base === "light" ? `inset 0 0 0 1px ${r.borderColor ?? `color-mix(in oklab, ${r.color ?? a.color.dark} 10%, transparent 90%)`}` : `inset 0 0 0 1px ${r.borderColor ?? "none"}`, backgroundColor: a.color.mediumlight, color: a.color.dark, wordBreak: "normal", width: o ? "min-content" : "fit-content", flexShrink: 0, textWrapStyle: "pretty", textAlign: "center", ...r, borderColor: void 0 })), G = styled.div(({ theme: e }) => ({ padding: "8px 12px", boxSizing: "border-box", color: e.color.defaultText, lineHeight: "1.125rem" })), X = ({ context: e, style: t, text: r, tooltip: o }) => {
    let a = useTheme(), s;
    if (t === "green" ? s = { backgroundColor: "hsl(130, 100%, 74%)", borderColor: "hsl(130, 100%, 34%)", color: "hsl(130, 100%, 6%)" } : t === "purple" ? s = { backgroundColor: "hsl(257, 100%, 84%)", borderColor: "hsl(257, 100%, 64%)", color: "hsl(257, 100%, 12%)" } : t === "blue" ? s = { backgroundColor: "hsl(194, 100%, 74%)", borderColor: "hsl(194, 100%, 34%)", color: "hsl(194, 100%, 12%)" } : t === "grey" ? s = { backgroundColor: "hsl(0, 0%, 84%)", borderColor: "hsl(0, 0%, 34%)", color: "hsl(0, 0%, 12%)" } : t === "orange" ? s = { backgroundColor: "hsl(16, 100%, 74%)", borderColor: "hsl(16, 100%, 34%)", color: "hsl(16, 100%, 12%)" } : t === "red" ? s = { backgroundColor: "hsl(0, 100%, 44%)", borderColor: "hsl(0, 100%, 64%)", color: "hsl(0, 100%, 94%)" } : t === "yellow" ? s = { backgroundColor: "hsl(36, 100%, 74%)", borderColor: "hsl(36, 100%, 34%)", color: "hsl(36, 100%, 12%)" } : t === "pink" ? s = { backgroundColor: "hsl(330, 100%, 74%)", borderColor: "hsl(330, 100%, 34%)", color: "hsl(330, 100%, 12%)" } : t === "turquoise" ? s = { backgroundColor: "hsl(157, 100%, 74%)", borderColor: "hsl(157, 100%, 34%)", color: "hsl(157, 100%, 12%)" } : typeof t == "object" && (s = { ...t }), typeof r != "string") throw new Error("Badge: the text prop must be defined and must be a string.");
    let p = r.length > 15;
    return react_default.createElement(Fragment, null, !o || e == "sidebar" ? react_default.createElement(W, { context: e, extraStyle: s ?? {}, hasLongText: p, theme: a }, r) : react_default.createElement(z, { closeOnOutsideClick: !0, placement: "bottom", tooltip: typeof o == "string" ? react_default.createElement(G, null, o) : react_default.createElement(g.TooltipMessage, { ...o }) }, react_default.createElement(W, { as: "button", context: e, extraStyle: s ?? {}, hasLongText: p, theme: a }, r)));
  };
  function J(e, t, r, o) {
    return typeof e == "function" ? e({ context: o, entry: t, getTagParts: y, getTagPrefix: O, getTagSuffix: A2, tag: r }) : e;
  }
  var x = ({ context: e, config: t, entry: r, tag: o, ...a }) => {
    let s = J(t, r, o, e);
    return react_default.createElement(X, { ...s, context: e, ...a });
  }, P2 = { mdx: ["story", "component"], sidebar: [{ type: "story", skipInherited: !0 }, { type: "docs", skipInherited: !0 }, { type: "component", skipInherited: !1 }, { type: "group", skipInherited: !1 }], toolbar: ["docs", "story"] };
  function B(e) {
    return Array.isArray(e) ? e : [e];
  }
  function Q(e) {
    return { mdx: B(e?.mdx ?? P2.mdx), sidebar: B(e?.sidebar ?? P2.sidebar), toolbar: B(e?.toolbar ?? P2.toolbar) };
  }
  function _({ config: e, context: t, type: r }) {
    if (r === "root") return "never";
    for (let o of Q(e.display)[t]) {
      if (o === !0) return "always";
      if (o === !1) return "never";
      if (o === r) return "always";
      if (t === "sidebar" && typeof o == "object" && o.type === r) return o.skipInherited ? "skip-inherited" : "always";
    }
    return "never";
  }
  function L({ api: e, context: t, parameters: r, parent: o, tags: a, type: s }) {
    if (!a || !s) return [];
    let p, i;
    return e && o && (i = e.resolveStory(o), i && i.type !== "root" && (p = i.tags)), (r || []).map((n) => ({ ...n, displayOutcome: _({ context: t, config: n, type: s }) })).filter(({ displayOutcome: n }) => n !== "never").flatMap((n) => k(a, n.tags).map((l) => ({ badge: n.badge, displayOutcome: n.displayOutcome, tag: l }))).reduce((n, l) => (l.displayOutcome === "skip-inherited" && i && i.type !== "root" && p?.includes(l.tag) && L({ api: e, context: t, parameters: r, parent: i.parent, tags: p, type: i.type }).find(({ tag: R }) => R === l.tag) || n.every(({ tag: E }) => E !== l.tag) && n.push(l), n), []);
  }
  function b({ context: e, parameters: t, parent: r, tags: o, type: a }) {
    let s = useStorybookApi2();
    return useMemo(() => L({ api: s, context: e, parameters: t, parent: r, tags: o, type: a }), [e, t, r, o, a]);
  }
  var re = styled.div`
  content: ' ';
  width: 1px;
  height: 20px;
  background: rgba(255, 255, 255, 0.1);
  margin-left: 2px;
  margin-right: 2px;
  display: inline-block;
`, oe = styled.div`
  display: flex;
  align-items: center;
  gap: 6px;

  &:last-child div:last-child {
    display: none;
  }
`, F = function({ api: t }) {
    let { [m]: r } = addons2.getConfig(), o = t.getCurrentStoryData(), { tags: a, type: s } = o ?? {}, p = b({ context: "toolbar", parameters: r, tags: a, type: s });
    return p.length ? react_default.createElement(oe, { key: u }, p.map(({ badge: i, tag: n }) => react_default.createElement(x, { config: i, context: "toolbar", entry: o, key: n, tag: n })), react_default.createElement(re, null)) : "";
  }, ae = { tags: "new", badge: { text: "New", style: "green" } }, se = { tags: ["alpha", "beta", "rc", "experimental"], badge: ({ tag: e }) => ({ text: e === "rc" ? "Release candidate" : ((r) => r[0].toUpperCase() + r.slice(1))(e), style: "purple" }) }, ne = { tags: "deprecated", badge: { text: "Deprecated", style: "yellow" } }, ie = { tags: "outdated", badge: { text: "Outdated", style: "orange" } }, pe = { tags: "danger", badge: { text: "Danger", style: "red" } }, de = { tags: ["code-only"], badge: { text: "Code Only", style: "grey" } }, le = { tags: [{ prefix: "v" }, { prefix: "version" }], badge: ({ getTagSuffix: e, tag: t }) => {
    let r = e(t), o = r?.startsWith("0");
    return { text: `${r}`, style: o ? "turquoise" : "blue" };
  } }, H = [ae, se, ne, ie, pe, de, le], fe = styled.div(({ hasParentPadding: e, hasStatusWithUI: t }) => `
  display: flex;
  flex: 1;
  justify-content: flex-end;
  flex-wrap: wrap;
  text-wrap-style: balance;
  gap: 4px;
  margin-right: ${t ? "6px" : e ? "28px" : "34px"};
}
`), me = styled.div`
  flex: 1;
}
`, U = ({ children: e, item: t, hasStatusWithUI: r }) => {
    let { [m]: o } = addons2.getConfig();
    if (t.type !== "component" && t.type !== "group" && t.type !== "docs" && t.type !== "story") return e;
    let a = b({ context: "sidebar", parameters: o, parent: t.parent, tags: t.tags, type: t.type });
    return react_default.createElement(fe, { hasParentPadding: t.type === "component" || t.type === "group", hasStatusWithUI: r ?? !1 }, e, react_default.createElement(me, null), a.length ? react_default.createElement(x, { config: a[0].badge, context: "sidebar", entry: t, tag: a[0].tag }) : "");
  };
  function ue(e) {
    return e ? !!e["storybook/component-test"] : !1;
  }
  function v(e) {
    if (e.type !== "story" && e.type !== "group" && e.type !== "docs" && e.type !== "component") return;
    let t = experimental_useStatusStore2((r) => r[e.id]);
    return react_default.createElement(U, { item: e, hasStatusWithUI: ue(t) }, e.name);
  }
  d.addons.register(h, (e) => {
    d.addons.add(u, { type: d.types.TOOL, title: "Tag Badges", render: () => react_default.createElement(F, { api: e }) });
  });
  d.addons.setConfig({ [m]: H, sidebar: { renderLabel: v } });
})();
}catch(e){ console.error("[Storybook] One of your manager-entries failed: " + import.meta.url, e); }
